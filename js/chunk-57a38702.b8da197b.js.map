{"version":3,"sources":["webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-shh/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/uint.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-requestmanager/src/givenProvider.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/string.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/src/subscription.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/rlp.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/bytes.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/array.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/dynamicbytes.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-eth/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-requestmanager/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-net/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core/src/extend.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/bytes.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/type.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/uuid/rng-browser.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-eth-iban/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ipc/node_modules/web3-core-helpers/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-core-subscriptions/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/uuid/uuid.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/formatters.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-core-promievent/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/address.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-utils/node_modules/eth-lib/lib/hash.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/bool.js","webpack:///../MyEtherWallet/node_modules/web3-eth-iban/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/hash.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-requestmanager/src/batch.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/web3-utils/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-bzz/src/index.js","webpack:///../MyEtherWallet/node_modules/isomorphic-fetch/fetch-npm-browserify.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-shh/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-personal/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-eth-iban/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/xhr2/lib/browser.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-http/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/bn.js/lib/bn.js","webpack:///../MyEtherWallet/node_modules/web3-eth-iban/node_modules/web3-utils/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/nat.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/param.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/src/types/int.js","webpack:///../MyEtherWallet/node_modules/web3-eth-abi/node_modules/web3-core-helpers/src/errors.js","webpack:///../MyEtherWallet/node_modules/web3-eth/src/getNetworkType.js","webpack:///../MyEtherWallet/node_modules/web3-eth-iban/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/web3-utils/src/utils.js","webpack:///../MyEtherWallet/node_modules/web3-eth-contract/node_modules/web3-core-helpers/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-providers-ws/node_modules/web3-utils/src/soliditySha3.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-method/src/index.js","webpack:///../MyEtherWallet/node_modules/web3-core/node_modules/web3-core-requestmanager/src/jsonrpc.js","webpack:///../MyEtherWallet/node_modules/web3-net/node_modules/bn.js/lib/bn.js"],"names":["_","__webpack_require__","ethjsUnit","utils","soliditySha3","randomHex","_fireError","error","emitter","reject","callback","isObject","Error","data","isArray","JSON","stringify","message","isString","isFunction","listeners","length","catch","setTimeout","emit","removeAllListeners","_jsonInterfaceMethodToString","json","name","indexOf","typeName","inputs","map","i","type","join","hexToAscii","hex","isHexStrict","str","l","substring","code","parseInt","substr","String","fromCharCode","asciiToHex","charCodeAt","n","toString","getUnitValue","unit","toLowerCase","unitMap","fromWei","number","isBN","toWei","toChecksumAddress","address","test","replace","addressHash","sha3","checksumAddress","toUpperCase","module","exports","BN","isBigNumber","isHex","keccak256","isAddress","checkAddressChecksum","toHex","toBN","bytesToHex","hexToBytes","hexToNumberString","hexToNumber","toDecimal","numberToHex","fromDecimal","hexToUtf8","hexToString","toUtf8","utf8ToHex","stringToHex","fromUtf8","toAscii","fromAscii","padLeft","leftPad","padRight","rightPad","toTwosComplement","Iban","outputBigNumberFormatter","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","this","undefined","inputBlockNumberFormatter","defaultBlock","_txInputFormatter","options","to","inputAddressFormatter","input","gas","gasLimit","filter","key","forEach","inputCallFormatter","from","defaultAccount","inputTransactionFormatter","isNumber","inputSignFormatter","outputTransactionFormatter","tx","transactionIndex","nonce","gasPrice","value","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","logs","outputLogFormatter","contractAddress","status","Boolean","outputBlockFormatter","block","size","timestamp","difficulty","totalDifficulty","transactions","item","miner","inputLogFormatter","toTopic","topics","topic","addr","log","blockHash","transactionHash","logIndex","shaId","id","inputPostFormatter","post","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","iban","isValid","isDirect","toAddress","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","ErrorResponse","InvalidNumberOfParams","got","expected","method","InvalidConnection","host","InvalidProvider","InvalidResponse","ConnectionTimeout","ms","core","Subscriptions","subscriptions","Method","Net","Shh","_this","packageInit","arguments","setProvider","apply","net","clearSubscriptions","_requestManager","currentProvider","messages","params","call","inputFormatter","attachToObject","setRequestManager","addProviders","errors","formatters","promiEvent","TIMEOUTBLOCK","POLLINGTIMEOUT","CONFIRMATIONBLOCKS","outputFormatter","transformPayload","extraFormatters","requestManager","accounts","prototype","createFunction","func","buildCall","obj","split","getCall","args","extractCallback","pop","validateArgs","formatInput","formatter","index","formatOutput","res","toPayload","payload","_confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","gasProvided","isContractDeployment","_ethereumCalls","newBlockHeaders","subscriptionName","_ethereumCall","each","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","clearInterval","resolve","getTransactionReceipt","eventEmitter","then","receiptFormatter","getCode","e","contractDeployFormatter","outOfGas","startWatching","provider","on","subscribe","bind","setInterval","getWallet","wallet","privateKey","isSendTx","send","Array","slice","sendTxCallback","sendSignedTx","sign","signedPayload","extend","rawTransaction","sendRequest","signTransaction","omit","signature","getGasPrice","request","format","f","SolidityType","SolidityTypeUInt","_inputFormatter","formatInputInt","_outputFormatter","formatOutputUInt","constructor","isType","match","_elementaryName","startsWith","_parseTypeN","typesize","exec","_parseTypeNArray","arraySize","_parseNumber","arg","_solidityPack","num","bitLength","lt","toTwos","_processSoliditySha3Args","hexArg","hasOwnProperty","t","v","val","hexArgs","givenProvider","global","Function","ethereumProvider","web3","sendAsync","connection","parse","SolidityTypeString","formatInputString","formatOutputString","isDynamicType","EventEmitter","Subscription","_reconnectIntervalId","subscription","Object","create","_extractCallback","_validateArgs","_formatInput","formattedArgs","_formatOutput","_toPayload","subscriptionMethod","shift","push","concat","removeSubscription","err1","err2","isFinite","fromBlock","output","addSubscription","once","reconnect","resultItem","subscriptionHandler","assert","msg","inherits","ctor","superCtor","super_","TempCtor","base","endian","negative","words","red","_init","Buffer","wordSize","parseHex","start","end","r","len","Math","min","c","parseBase","mul","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","ceil","j","w","off","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bit","wbit","smallMulTo","self","out","a","b","lo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","_zeroBits","hi","zeroBits","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","add","comb10MulTo","mid","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","s","rtwdf","cos","PI","itwdf","sin","p","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","m","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","outLen","prev","next","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","u","numberToBN","utf8","Hash","object","string","chars","hasPrefix","encode","reverse","decode","isNull","isUndefined","bytes","returnType","isBoolean","isBloom","bloom","isTopic","SHA3_NULL_S","returnValue","_Hash","tree","padEven","uint","dataTree","pre","_hex","_pre","parseTree","head","parseList","parseLength","lim","list","Promise","Account","RLP","Nat","Bytes","cryp","scryptsy","uuid","helpers","isNot","trimLeadingZero","makeEven","Accounts","BatchRequest","Wallet","_accounts","defaultKeyName","_addAccountFunctions","account","encrypt","password","entropy","privateKeyToAccount","fromPrivate","signed","chainId","transaction","rlpEncoded","fromNat","hash","makeSigner","rawTx","decodeSignature","values","messageHash","all","getId","getTransactionCount","recoverTransaction","encodeSignature","recovery","extraData","fromNumber","signingData","signingDataHex","recover","hashMessage","messageBuffer","preamble","preambleBuffer","ethMessage","keccak256s","vrs","preFixed","decrypt","v3Keystore","nonStrict","derivedKey","kdfparams","version","crypto","kdf","salt","dklen","prf","pbkdf2Sync","ciphertext","mac","decipher","createDecipheriv","cipher","cipherparams","iv","seed","update","final","randomBytes","createCipheriv","v4","random","_findSafeIndex","pointer","has","_currentIndexes","keys","indexes","numberOfAccounts","remove","addressOrIndex","clear","encryptedWallet","keystore","save","keyName","localStorage","setItem","load","getItem","XHR2","HttpProvider","timeout","headers","connected","_prepareRequest","open","setRequestHeader","header","onreadystatechange","readyState","responseText","ontimeout","at","rnd","window","getRandomValues","Uint8Array","flatten","reduce","bs","rev","pad","arr","fromArray","toUint8Array","fromUint8Array","bn","toNat","ascii","fromString","makeByte","uint8","ci","c2","generate","fn","replicate","J","I","chunksOf","SolidityTypeDynamicBytes","formatInputDynamicBytes","formatOutputDynamicBytes","Personal","BaseContract","abi","getNetworkType","blockCall","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","personal","Contract","defineProperty","get","set","methods","enumerable","pendingTransactions","removed","syncing","_isSyncing","clearTimeout","_isSyncingTimeout","Jsonrpc","BatchManager","RequestManager","providers","WebsocketProvider","IpcProvider","connect","deprecatedResult","isValidResponse","sendBatch","toBatchPayload","results","keepIsSyncing","reset","Manager","oboe","path","responseCallbacks","notificationCallbacks","addDefaultEvents","done","_parseResponse","_timeout","returnValues","dechunkedData","lastChunk","lastChunkTimeout","_addResponseCallback","writable","write","removeListener","cb","splice","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","TypeError","elliptic","secp256k1","ec","_require","innerHex","middleHex","outerHex","toChecksum","buffer","ecKey","keyFromPrivate","publicKey","getPublic","publicHash","_ref","_ref2","addToV","canonical","recoveryParam","vals","ecPublicKey","recoverPubKey","pckg","ex","extension","extendedObject","property","SolidityTypeBytes","formatInputBytes","formatOutputBytes","SolidityParam","config","staticPartLength","nestedTypes","previous","isDynamicArray","isStaticArray","staticArrayLength","nestedName","offset","arrayOffset","arrayStart","nestedStaticPartLength","roundedNestedStaticPartLength","floor","dynamicOffset","roundedLength","param","rng","_rnds8","_rnds","jsonInterface","lastArg","_getOrSetDefaultOptions","_address","events","_jsonInterface","funcName","encodeFunctionSignature","_createTxObject","parent","cascadeFunc","nextMethod","encodeEventSignature","event","_on","allEvents","_ethAccounts","_getCallback","_checkListener","_encodeEventABI","anonymous","indexedTopics","indexed","encodeParameter","_decodeEventABI","find","intf","argTopics","decodeLog","__length__","raw","_encodeMethodABI","methodSignature","_method","paramsABI","_parent","inputLength","types","encodeParameters","_deployData","_decodeMethodReturn","outputs","decodeParameters","deploy","deployData","_generateEventOptions","subOptions","getPastEvents","getPastLogs","txObject","_executeMethod","encodeABI","estimateGas","_processExecuteArguments","processedArgs","generateRequest","ethAccounts","payable","count","ev","newContract","sendTransaction","SolidityTypeAddress","SolidityTypeBool","SolidityTypeInt","isDynamic","solidityType","Result","ABICoder","_types","_requireType","_getOffsets","solidityTypes","lengths","_getSolidityTypes","_encodeMultiWithOffset","encodeds","_encodeWithOffset","encoded","previousLength","additionalOffset","functionName","roundedStaticPartLength","encodeFunctionCall","decodeParameter","isTypeArray","offsets","decodedValue","notIndexedInputs","indexedInputs","nonIndexedData","indexedData","notIndexedParams","indexedParams","coder","rm","console","warn","_rng","_byteToHex","_hexToByte","buf","ii","oct","unparse","bth","_seedBytes","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","clockseq","msecs","Date","getTime","nsecs","dt","tl","tmh","node","rnds","trunc","formatInputBool","signedIsNegative","formatOutputInt","staticPart","rawValue","formatOutputBool","matches","dynamicPart","formatOutputAddress","PromiEvent","justPromise","_events","addListener","promise","HEX_CHARS","KECCAK_PADDING","SHIFT","RC","Keccak","blocks","blockCount","outputBlocks","state","byteCount","lastByteIndex","c0","c1","c3","c4","c5","c6","c7","c8","c9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","keccak","keccak512","keccak512s","Batch","requests","execute","Ws","_btoa","parseURL","WebSocket","btoa","url","URL","w3cwebsocket","_customTimeout","parsedURL","username","authorization","onmessage","onerror","onclose","CONNECTING","OPEN","onopen","swarm","Bzz","document","pick","bzz","noProviderError","download","upload","isAvailable","fetch","XMLHttpRequest","fromBN","toEther","wei","fromEther","eth","toUint256","bin","dynamicPartLength","withOffset","combine","offsetAsBytes","encodeList","totalOffset","offsetParams","givenId","getBlock","genesis","BigNumber","iso13616Prepare","Z","mod9710","remainder","_iban","ib","toIban","fromAddress","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","institution","identifier","isIndirect","checksum","client","pkg","_provider","configurable","messageId","jsonrpc","response","every","validateSingleMessage"],"mappings":"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","file":"js/chunk-57a38702.b8da197b.js","sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar core = require('web3-core');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\n// var formatters = require('web3-core-helpers').formatters;\nvar Net = require('web3-net');\n\n\nvar Shh = function Shh() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n    };\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    this.net = new Net(this.currentProvider);\n\n\n    [\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'shh',\n            subscriptions: {\n                'messages': {\n                    params: 1\n                    // inputFormatter: [formatters.inputPostFormatter],\n                    // outputFormatter: formatters.outputPostFormatter\n                }\n            }\n        }),\n\n        new Method({\n            name: 'getVersion',\n            call: 'shh_version',\n            params: 0\n        }),\n        new Method({\n            name: 'getInfo',\n            call: 'shh_info',\n            params: 0\n        }),\n        new Method({\n            name: 'setMaxMessageSize',\n            call: 'shh_setMaxMessageSize',\n            params: 1\n        }),\n        new Method({\n            name: 'setMinPoW',\n            call: 'shh_setMinPoW',\n            params: 1\n        }),\n        new Method({\n            name: 'markTrustedPeer',\n            call: 'shh_markTrustedPeer',\n            params: 1\n        }),\n        new Method({\n            name: 'newKeyPair',\n            call: 'shh_newKeyPair',\n            params: 0\n        }),\n        new Method({\n            name: 'addPrivateKey',\n            call: 'shh_addPrivateKey',\n            params: 1\n        }),\n        new Method({\n            name: 'deleteKeyPair',\n            call: 'shh_deleteKeyPair',\n            params: 1\n        }),\n        new Method({\n            name: 'hasKeyPair',\n            call: 'shh_hasKeyPair',\n            params: 1\n        }),\n        new Method({\n            name: 'getPublicKey',\n            call: 'shh_getPublicKey',\n            params: 1\n        }),\n        new Method({\n            name: 'getPrivateKey',\n            call: 'shh_getPrivateKey',\n            params: 1\n        }),\n        new Method({\n            name: 'newSymKey',\n            call: 'shh_newSymKey',\n            params: 0\n        }),\n        new Method({\n            name: 'addSymKey',\n            call: 'shh_addSymKey',\n            params: 1\n        }),\n        new Method({\n            name: 'generateSymKeyFromPassword',\n            call: 'shh_generateSymKeyFromPassword',\n            params: 1\n        }),\n        new Method({\n            name: 'hasSymKey',\n            call: 'shh_hasSymKey',\n            params: 1\n        }),\n        new Method({\n            name: 'getSymKey',\n            call: 'shh_getSymKey',\n            params: 1\n        }),\n        new Method({\n            name: 'deleteSymKey',\n            call: 'shh_deleteSymKey',\n            params: 1\n        }),\n\n        new Method({\n            name: 'newMessageFilter',\n            call: 'shh_newMessageFilter',\n            params: 1\n        }),\n        new Method({\n            name: 'getFilterMessages',\n            call: 'shh_getFilterMessages',\n            params: 1\n        }),\n        new Method({\n            name: 'deleteMessageFilter',\n            call: 'shh_deleteMessageFilter',\n            params: 1\n        }),\n\n        new Method({\n            name: 'post',\n            call: 'shh_post',\n            params: 1,\n            inputFormatter: [null]\n        })\n    ].forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager);\n    });\n};\n\ncore.addProviders(Shh);\n\n\n\nmodule.exports = Shh;\n\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeUInt is a protoype that represents uint type\n * It matches:\n * uint\n * uint[]\n * uint[4]\n * uint[][]\n * uint[3][]\n * uint[][6][], ...\n * uint32\n * uint64[]\n * uint8[4]\n * uint256[][]\n * uint[3][]\n * uint64[][6][], ...\n */\nvar SolidityTypeUInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputUInt;\n};\n\nSolidityTypeUInt.prototype = new SolidityType({});\nSolidityTypeUInt.prototype.constructor = SolidityTypeUInt;\n\nSolidityTypeUInt.prototype.isType = function (name) {\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeUInt;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file givenProvider.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar givenProvider = null;\n\n// ADD GIVEN PROVIDER\n/* jshint ignore:start */\nvar global = Function('return this')();\n\n// EthereumProvider\nif(typeof global.ethereumProvider !== 'undefined') {\n    givenProvider = global.ethereumProvider;\n\n// Legacy web3.currentProvider\n} else if(typeof global.web3 !== 'undefined' && global.web3.currentProvider) {\n\n    if(global.web3.currentProvider.sendAsync) {\n        global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;\n        delete global.web3.currentProvider.sendAsync;\n    }\n\n    // if connection is 'ipcProviderWrapper', add subscription support\n    if(!global.web3.currentProvider.on &&\n        global.web3.currentProvider.connection &&\n        global.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {\n\n        global.web3.currentProvider.on = function (type, callback) {\n\n            if(typeof callback !== 'function')\n                throw new Error('The second parameter callback must be a function.');\n\n            switch(type){\n                case 'data':\n                    this.connection.on('data', function(data) {\n                        var result = '';\n\n                        data = data.toString();\n\n                        try {\n                            result = JSON.parse(data);\n                        } catch(e) {\n                            return callback(new Error('Couldn\\'t parse response data'+ data));\n                        }\n\n                        // notification\n                        if(!result.id && result.method.indexOf('_subscription') !== -1) {\n                            callback(null, result);\n                        }\n\n                    });\n                    break;\n\n                default:\n                    this.connection.on(type, callback);\n                    break;\n            }\n        };\n    }\n\n    givenProvider = global.web3.currentProvider;\n}\n/* jshint ignore:end */\n\n\nmodule.exports = givenProvider;\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\nvar SolidityTypeString = function () {\n    this._inputFormatter = f.formatInputString;\n    this._outputFormatter = f.formatOutputString;\n};\n\nSolidityTypeString.prototype = new SolidityType({});\nSolidityTypeString.prototype.constructor = SolidityTypeString;\n\nSolidityTypeString.prototype.isType = function (name) {\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeString.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeString;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar EventEmitter = require('eventemitter3');\n\n\nfunction Subscription(options) {\n    EventEmitter.call(this);\n\n    this.id = null;\n    this.callback = null;\n    this.arguments = null;\n    this._reconnectIntervalId = null;\n\n    this.options = {\n        subscription: options.subscription,\n        type: options.type,\n        requestManager: options.requestManager\n    };\n}\n\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\nSubscription.prototype._extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\nSubscription.prototype._validateArgs = function (args) {\n    var subscription = this.options.subscription;\n\n    if(!subscription)\n        subscription = {};\n\n    if(!subscription.params)\n        subscription.params = 0;\n\n    if (args.length !== subscription.params) {\n        throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\nSubscription.prototype._formatInput = function (args) {\n    var subscription = this.options.subscription;\n\n    if (!subscription) {\n        return args;\n    }\n\n    if (!subscription.inputFormatter) {\n        return args;\n    }\n\n    var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n\n    return formattedArgs;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\nSubscription.prototype._formatOutput = function (result) {\n    var subscription = this.options.subscription;\n\n    return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nSubscription.prototype._toPayload = function (args) {\n    var params = [];\n    this.callback = this._extractCallback(args);\n\n    if (!this.subscriptionMethod) {\n        this.subscriptionMethod = args.shift();\n\n        // replace subscription with given name\n        if (this.options.subscription.subscriptionName) {\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\n        }\n    }\n\n    if (!this.arguments) {\n        this.arguments = this._formatInput(args);\n        this._validateArgs(this.arguments);\n        args = []; // make empty after validation\n\n    }\n\n    // re-add subscriptionName\n    params.push(this.subscriptionMethod);\n    params = params.concat(this.arguments);\n\n\n    if (args.length) {\n        throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n    }\n\n    return {\n        method: this.options.type + '_subscribe',\n        params: params\n    };\n};\n\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */\nSubscription.prototype.unsubscribe = function(callback) {\n    this.options.requestManager.removeSubscription(this.id, callback);\n    this.id = null;\n    this.removeAllListeners();\n    clearInterval(this._reconnectIntervalId);\n};\n\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */\nSubscription.prototype.subscribe = function() {\n    var _this = this;\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this._toPayload(args);\n\n    if(!payload) {\n        return this;\n    }\n\n    if(!this.options.requestManager.provider) {\n        var err1 = new Error('No provider set.');\n        this.callback(err1, null, this);\n        this.emit('error', err1);\n        return this;\n    }\n\n    // throw error, if provider doesnt support subscriptions\n    if(!this.options.requestManager.provider.on) {\n        var err2 = new Error('The current provider doesn\\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);\n        this.callback(err2, null, this);\n        this.emit('error', err2);\n        return this;\n    }\n\n    // if id is there unsubscribe first\n    if (this.id) {\n        this.unsubscribe();\n    }\n\n    // store the params in the options object\n    this.options.params = payload.params[1];\n\n    // get past logs, if fromBlock is available\n    if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n        // send the subscription request\n        this.options.requestManager.send({\n            method: 'eth_getLogs',\n            params: [payload.params[1]]\n        }, function (err, logs) {\n            if(!err) {\n                logs.forEach(function(log){\n                    var output = _this._formatOutput(log);\n                    _this.callback(null, output, _this);\n                    _this.emit('data', output);\n                });\n\n                // TODO subscribe here? after the past logs?\n\n            } else {\n                _this.callback(err, null, _this);\n                _this.emit('error', err);\n            }\n        });\n    }\n\n    // create subscription\n    // TODO move to separate function? so that past logs can go first?\n\n    if(typeof payload.params[1] === 'object')\n        delete payload.params[1].fromBlock;\n\n    this.options.requestManager.send(payload, function (err, result) {\n        if(!err && result) {\n            _this.id = result;\n\n            // call callback on notifications\n            _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {\n\n                if (!err) {\n                    if (!_.isArray(result)) {\n                        result = [result];\n                    }\n\n                    result.forEach(function(resultItem) {\n                        var output = _this._formatOutput(resultItem);\n\n                        if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\n                        } else {\n                            _this.emit('data', output);\n                        }\n\n                        // call the callback, last so that unsubscribe there won't affect the emit above\n                        if (_.isFunction(_this.callback)) {\n                            _this.callback(null, output, _this);\n                        }\n                    });\n                } else {\n                    // unsubscribe, but keep listeners\n                    _this.options.requestManager.removeSubscription(_this.id);\n\n                    // re-subscribe, if connection fails\n                    if(_this.options.requestManager.provider.once) {\n                        _this._reconnectIntervalId = setInterval(function () {\n                            // TODO check if that makes sense!\n                            if (_this.options.requestManager.provider.reconnect) {\n                                _this.options.requestManager.provider.reconnect();\n                            }\n                        }, 500);\n\n                        _this.options.requestManager.provider.once('connect', function () {\n                            clearInterval(_this._reconnectIntervalId);\n                            _this.subscribe(_this.callback);\n                        });\n                    }\n                    _this.emit('error', err);\n\n                     // call the callback, last so that unsubscribe there won't affect the emit above\n                     if (_.isFunction(_this.callback)) {\n                        _this.callback(err, null, _this);\n                    }\n                }\n            });\n        } else if (_.isFunction(_this.callback)) {\n            _this.callback(err, null, _this);\n            _this.emit('error', err);\n        } else {\n            // emit the event even if no callback was provided\n            _this.emit('error', err);\n        }\n    });\n\n    // return an object to cancel the subscription\n    return this;\n};\n\nmodule.exports = Subscription;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nvar encode = function encode(tree) {\n  var padEven = function padEven(str) {\n    return str.length % 2 === 0 ? str : \"0\" + str;\n  };\n\n  var uint = function uint(num) {\n    return padEven(num.toString(16));\n  };\n\n  var length = function length(len, add) {\n    return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n  };\n\n  var dataTree = function dataTree(tree) {\n    if (typeof tree === \"string\") {\n      var hex = tree.slice(2);\n      var pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      var _hex = tree.map(dataTree).join(\"\");\n      var _pre = length(_hex.length / 2, 192);\n      return _pre + _hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nvar decode = function decode(hex) {\n  var i = 2;\n\n  var parseTree = function parseTree() {\n    if (i >= hex.length) throw \"\";\n    var head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  var parseLength = function parseLength() {\n    var len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  var parseHex = function parseHex() {\n    var len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  var parseList = function parseList() {\n    var lim = parseLength() * 2 + i;\n    var list = [];\n    while (i < lim) {\n      list.push(parseTree());\n    }return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode: encode, decode: decode };","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file accounts.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar core = require('web3-core');\nvar Method = require('web3-core-method');\nvar Promise = require('any-promise');\nvar Account = require(\"eth-lib/lib/account\");\nvar Hash = require(\"eth-lib/lib/hash\");\nvar RLP = require(\"eth-lib/lib/rlp\");\nvar Nat = require(\"eth-lib/lib/nat\");\nvar Bytes = require(\"eth-lib/lib/bytes\");\nvar cryp = (typeof global === 'undefined') ? require('crypto-browserify') : require('crypto');\nvar scryptsy = require('scrypt.js');\nvar uuid = require('uuid');\nvar utils = require('web3-utils');\nvar helpers = require('web3-core-helpers');\n\nvar isNot = function(value) {\n    return (_.isUndefined(value) || _.isNull(value));\n};\n\nvar trimLeadingZero = function (hex) {\n    while (hex && hex.startsWith('0x0')) {\n        hex = '0x' + hex.slice(3);\n    }\n    return hex;\n};\n\nvar makeEven = function (hex) {\n    if(hex.length % 2 === 1) {\n        hex = hex.replace('0x', '0x0');\n    }\n    return hex;\n};\n\n\nvar Accounts = function Accounts() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // remove unecessary core functions\n    delete this.BatchRequest;\n    delete this.extend;\n\n    var _ethereumCall = [\n        new Method({\n            name: 'getId',\n            call: 'net_version',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [function (address) {\n                if (utils.isAddress(address)) {\n                    return address;\n                } else {\n                    throw new Error('Address '+ address +' is not a valid address to get the \"transactionCount\".');\n                }\n            }, function () { return 'latest'; }]\n        })\n    ];\n    // attach methods to this._ethereumCall\n    this._ethereumCall = {};\n    _.each(_ethereumCall, function (method) {\n        method.attachToObject(_this._ethereumCall);\n        method.setRequestManager(_this._requestManager);\n    });\n\n\n    this.wallet = new Wallet(this);\n};\n\nAccounts.prototype._addAccountFunctions = function (account) {\n    var _this = this;\n\n    // add sign functions\n    account.signTransaction = function signTransaction(tx, callback) {\n        return _this.signTransaction(tx, account.privateKey, callback);\n    };\n    account.sign = function sign(data) {\n        return _this.sign(data, account.privateKey);\n    };\n\n    account.encrypt = function encrypt(password, options) {\n        return _this.encrypt(account.privateKey, password, options);\n    };\n\n\n    return account;\n};\n\nAccounts.prototype.create = function create(entropy) {\n    return this._addAccountFunctions(Account.create(entropy || utils.randomHex(32)));\n};\n\nAccounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {\n    return this._addAccountFunctions(Account.fromPrivate(privateKey));\n};\n\nAccounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {\n    var _this = this,\n        error = false,\n        result;\n\n    callback = callback || function () {};\n\n    if (!tx) {\n        error = new Error('No transaction object given!');\n\n        callback(error);\n        return Promise.reject(error);\n    }\n\n    function signed (tx) {\n\n        if (!tx.gas && !tx.gasLimit) {\n            error = new Error('\"gas\" is missing');\n        }\n\n        if (tx.nonce  < 0 ||\n            tx.gas  < 0 ||\n            tx.gasPrice  < 0 ||\n            tx.chainId  < 0) {\n            error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');\n        }\n\n        if (error) {\n            callback(error);\n            return Promise.reject(new Error('\"gas\" is missing'));\n        }\n\n        try {\n            tx = helpers.formatters.inputCallFormatter(tx);\n\n            var transaction = tx;\n            transaction.to = tx.to || '0x';\n            transaction.data = tx.data || '0x';\n            transaction.value = tx.value || '0x';\n            transaction.chainId = utils.numberToHex(tx.chainId);\n\n            var rlpEncoded = RLP.encode([\n                Bytes.fromNat(transaction.nonce),\n                Bytes.fromNat(transaction.gasPrice),\n                Bytes.fromNat(transaction.gas),\n                transaction.to.toLowerCase(),\n                Bytes.fromNat(transaction.value),\n                transaction.data,\n                Bytes.fromNat(transaction.chainId || \"0x1\"),\n                \"0x\",\n                \"0x\"]);\n\n\n            var hash = Hash.keccak256(rlpEncoded);\n\n            var signature = Account.makeSigner(Nat.toNumber(transaction.chainId || \"0x1\") * 2 + 35)(Hash.keccak256(rlpEncoded), privateKey);\n\n            var rawTx = RLP.decode(rlpEncoded).slice(0, 6).concat(Account.decodeSignature(signature));\n\n            rawTx[6] = makeEven(trimLeadingZero(rawTx[6]));\n            rawTx[7] = makeEven(trimLeadingZero(rawTx[7]));\n            rawTx[8] = makeEven(trimLeadingZero(rawTx[8]));\n\n            var rawTransaction = RLP.encode(rawTx);\n\n            var values = RLP.decode(rawTransaction);\n            result = {\n                messageHash: hash,\n                v: trimLeadingZero(values[6]),\n                r: trimLeadingZero(values[7]),\n                s: trimLeadingZero(values[8]),\n                rawTransaction: rawTransaction\n            };\n\n        } catch(e) {\n            callback(e);\n            return Promise.reject(e);\n        }\n\n        callback(null, result);\n        return result;\n    }\n\n    // Resolve immediately if nonce, chainId and price are provided\n    if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined) {\n        return Promise.resolve(signed(tx));\n    }\n\n\n    // Otherwise, get the missing info from the Ethereum Node\n    return Promise.all([\n        isNot(tx.chainId) ? _this._ethereumCall.getId() : tx.chainId,\n        isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,\n        isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce\n    ]).then(function (args) {\n        if (isNot(args[0]) || isNot(args[1]) || isNot(args[2])) {\n            throw new Error('One of the values \"chainId\", \"gasPrice\", or \"nonce\" couldn\\'t be fetched: '+ JSON.stringify(args));\n        }\n        return signed(_.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2]}));\n    });\n};\n\n/* jshint ignore:start */\nAccounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {\n    var values = RLP.decode(rawTx);\n    var signature = Account.encodeSignature(values.slice(6,9));\n    var recovery = Bytes.toNumber(values[6]);\n    var extraData = recovery < 35 ? [] : [Bytes.fromNumber((recovery - 35) >> 1), \"0x\", \"0x\"];\n    var signingData = values.slice(0,6).concat(extraData);\n    var signingDataHex = RLP.encode(signingData);\n    return Account.recover(Hash.keccak256(signingDataHex), signature);\n};\n/* jshint ignore:end */\n\nAccounts.prototype.hashMessage = function hashMessage(data) {\n    var message = utils.isHexStrict(data) ? utils.hexToBytes(data) : data;\n    var messageBuffer = Buffer.from(message);\n    var preamble = \"\\x19Ethereum Signed Message:\\n\" + message.length;\n    var preambleBuffer = Buffer.from(preamble);\n    var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n    return Hash.keccak256s(ethMessage);\n};\n\nAccounts.prototype.sign = function sign(data, privateKey) {\n    var hash = this.hashMessage(data);\n    var signature = Account.sign(hash, privateKey);\n    var vrs = Account.decodeSignature(signature);\n    return {\n        message: data,\n        messageHash: hash,\n        v: vrs[0],\n        r: vrs[1],\n        s: vrs[2],\n        signature: signature\n    };\n};\n\nAccounts.prototype.recover = function recover(message, signature, preFixed) {\n    var args = [].slice.apply(arguments);\n\n\n    if (_.isObject(message)) {\n        return this.recover(message.messageHash, Account.encodeSignature([message.v, message.r, message.s]), true);\n    }\n\n    if (!preFixed) {\n        message = this.hashMessage(message);\n    }\n\n    if (args.length >= 4) {\n        preFixed = args.slice(-1)[0];\n        preFixed = _.isBoolean(preFixed) ? !!preFixed : false;\n\n        return this.recover(message, Account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s\n    }\n    return Account.recover(message, signature);\n};\n\n// Taken from https://github.com/ethereumjs/ethereumjs-wallet\nAccounts.prototype.decrypt = function (v3Keystore, password, nonStrict) {\n    /* jshint maxcomplexity: 10 */\n\n    if(!_.isString(password)) {\n        throw new Error('No password given.');\n    }\n\n    var json = (_.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);\n\n    if (json.version !== 3) {\n        throw new Error('Not a valid V3 wallet');\n    }\n\n    var derivedKey;\n    var kdfparams;\n    if (json.crypto.kdf === 'scrypt') {\n        kdfparams = json.crypto.kdfparams;\n\n        // FIXME: support progress reporting callback\n        derivedKey = scryptsy(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else if (json.crypto.kdf === 'pbkdf2') {\n        kdfparams = json.crypto.kdfparams;\n\n        if (kdfparams.prf !== 'hmac-sha256') {\n            throw new Error('Unsupported parameters to PBKDF2');\n        }\n\n        derivedKey = cryp.pbkdf2Sync(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else {\n        throw new Error('Unsupported key derivation scheme');\n    }\n\n    var ciphertext = new Buffer(json.crypto.ciphertext, 'hex');\n\n    var mac = utils.sha3(Buffer.concat([ derivedKey.slice(16, 32), ciphertext ])).replace('0x','');\n    if (mac !== json.crypto.mac) {\n        throw new Error('Key derivation failed - possibly wrong password');\n    }\n\n    var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), new Buffer(json.crypto.cipherparams.iv, 'hex'));\n    var seed = '0x'+ Buffer.concat([ decipher.update(ciphertext), decipher.final() ]).toString('hex');\n\n    return this.privateKeyToAccount(seed);\n};\n\nAccounts.prototype.encrypt = function (privateKey, password, options) {\n    /* jshint maxcomplexity: 20 */\n    var account = this.privateKeyToAccount(privateKey);\n\n    options = options || {};\n    var salt = options.salt || cryp.randomBytes(32);\n    var iv = options.iv || cryp.randomBytes(16);\n\n    var derivedKey;\n    var kdf = options.kdf || 'scrypt';\n    var kdfparams = {\n        dklen: options.dklen || 32,\n        salt: salt.toString('hex')\n    };\n\n    if (kdf === 'pbkdf2') {\n        kdfparams.c = options.c || 262144;\n        kdfparams.prf = 'hmac-sha256';\n        derivedKey = cryp.pbkdf2Sync(new Buffer(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n    } else if (kdf === 'scrypt') {\n        // FIXME: support progress reporting callback\n        kdfparams.n = options.n || 8192; // 2048 4096 8192 16384\n        kdfparams.r = options.r || 8;\n        kdfparams.p = options.p || 1;\n        derivedKey = scryptsy(new Buffer(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n        throw new Error('Unsupported kdf');\n    }\n\n    var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n    if (!cipher) {\n        throw new Error('Unsupported cipher');\n    }\n\n    var ciphertext = Buffer.concat([ cipher.update(new Buffer(account.privateKey.replace('0x',''), 'hex')), cipher.final() ]);\n\n    var mac = utils.sha3(Buffer.concat([ derivedKey.slice(16, 32), new Buffer(ciphertext, 'hex') ])).replace('0x','');\n\n    return {\n        version: 3,\n        id: uuid.v4({ random: options.uuid || cryp.randomBytes(16) }),\n        address: account.address.toLowerCase().replace('0x',''),\n        crypto: {\n            ciphertext: ciphertext.toString('hex'),\n            cipherparams: {\n                iv: iv.toString('hex')\n            },\n            cipher: options.cipher || 'aes-128-ctr',\n            kdf: kdf,\n            kdfparams: kdfparams,\n            mac: mac.toString('hex')\n        }\n    };\n};\n\n\n// Note: this is trying to follow closely the specs on\n// http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html\n\nfunction Wallet(accounts) {\n    this._accounts = accounts;\n    this.length = 0;\n    this.defaultKeyName = \"web3js_wallet\";\n}\n\nWallet.prototype._findSafeIndex = function (pointer) {\n    pointer = pointer || 0;\n    if (_.has(this, pointer)) {\n        return this._findSafeIndex(pointer + 1);\n    } else {\n        return pointer;\n    }\n};\n\nWallet.prototype._currentIndexes = function () {\n    var keys = Object.keys(this);\n    var indexes = keys\n        .map(function(key) { return parseInt(key); })\n        .filter(function(n) { return (n < 9e20); });\n\n    return indexes;\n};\n\nWallet.prototype.create = function (numberOfAccounts, entropy) {\n    for (var i = 0; i < numberOfAccounts; ++i) {\n        this.add(this._accounts.create(entropy).privateKey);\n    }\n    return this;\n};\n\nWallet.prototype.add = function (account) {\n\n    if (_.isString(account)) {\n        account = this._accounts.privateKeyToAccount(account);\n    }\n    if (!this[account.address]) {\n        account = this._accounts.privateKeyToAccount(account.privateKey);\n        account.index = this._findSafeIndex();\n\n        this[account.index] = account;\n        this[account.address] = account;\n        this[account.address.toLowerCase()] = account;\n\n        this.length++;\n\n        return account;\n    } else {\n        return this[account.address];\n    }\n};\n\nWallet.prototype.remove = function (addressOrIndex) {\n    var account = this[addressOrIndex];\n\n    if (account && account.address) {\n        // address\n        this[account.address].privateKey = null;\n        delete this[account.address];\n        // address lowercase\n        this[account.address.toLowerCase()].privateKey = null;\n        delete this[account.address.toLowerCase()];\n        // index\n        this[account.index].privateKey = null;\n        delete this[account.index];\n\n        this.length--;\n\n        return true;\n    } else {\n        return false;\n    }\n};\n\nWallet.prototype.clear = function () {\n    var _this = this;\n    var indexes = this._currentIndexes();\n\n    indexes.forEach(function(index) {\n        _this.remove(index);\n    });\n\n    return this;\n};\n\nWallet.prototype.encrypt = function (password, options) {\n    var _this = this;\n    var indexes = this._currentIndexes();\n\n    var accounts = indexes.map(function(index) {\n        return _this[index].encrypt(password, options);\n    });\n\n    return accounts;\n};\n\n\nWallet.prototype.decrypt = function (encryptedWallet, password) {\n    var _this = this;\n\n    encryptedWallet.forEach(function (keystore) {\n        var account = _this._accounts.decrypt(keystore, password);\n\n        if (account) {\n            _this.add(account);\n        } else {\n            throw new Error('Couldn\\'t decrypt accounts. Password wrong?');\n        }\n    });\n\n    return this;\n};\n\nWallet.prototype.save = function (password, keyName) {\n    localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));\n\n    return true;\n};\n\nWallet.prototype.load = function (password, keyName) {\n    var keystore = localStorage.getItem(keyName || this.defaultKeyName);\n\n    if (keystore) {\n        try {\n            keystore = JSON.parse(keystore);\n        } catch(e) {\n\n        }\n    }\n\n    return this.decrypt(keystore || [], password);\n};\n\nif (typeof localStorage === 'undefined') {\n    delete Wallet.prototype.save;\n    delete Wallet.prototype.load;\n}\n\n\nmodule.exports = Accounts;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2015\n */\n\nvar errors = require('web3-core-helpers').errors;\nvar XHR2 = require('xhr2'); // jshint ignore: line\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\nvar HttpProvider = function HttpProvider(host, timeout, headers) {\n    this.host = host || 'http://localhost:8545';\n    this.timeout = timeout || 0;\n    this.connected = false;\n    this.headers = headers;\n};\n\nHttpProvider.prototype._prepareRequest = function(){\n    var request = new XHR2();\n\n    request.open('POST', this.host, true);\n    request.setRequestHeader('Content-Type','application/json');\n\n    if(this.headers) {\n        this.headers.forEach(function(header) {\n            request.setRequestHeader(header.name, header.value);\n        });\n    }\n\n    return request;\n};\n\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.send = function (payload, callback) {\n    var _this = this;\n    var request = this._prepareRequest();\n\n\n    request.onreadystatechange = function() {\n        if (request.readyState === 4 && request.timeout !== 1) {\n            var result = request.responseText;\n            var error = null;\n\n            try {\n                result = JSON.parse(result);\n            } catch(e) {\n                error = errors.InvalidResponse(request.responseText);\n            }\n\n            _this.connected = true;\n            callback(error, result);\n        }\n    };\n\n    request.ontimeout = function() {\n        _this.connected = false;\n        callback(errors.ConnectionTimeout(this.timeout));\n    };\n\n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        this.connected = false;\n        callback(errors.InvalidConnection(this.host));\n    }\n};\n\n\nmodule.exports = HttpProvider;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","var A = require(\"./array.js\");\n\nvar at = function at(bytes, index) {\n  return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\n};\n\nvar random = function random(bytes) {\n  var rnd = void 0;\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof require !== \"undefined\") rnd = require(\"c\" + \"rypto\").randomBytes(bytes);else throw \"Safe random numbers not available.\";\n  var hex = \"0x\";\n  for (var i = 0; i < bytes; ++i) {\n    hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n  }return hex;\n};\n\nvar length = function length(a) {\n  return (a.length - 2) / 2;\n};\n\nvar flatten = function flatten(a) {\n  return \"0x\" + a.reduce(function (r, s) {\n    return r + s.slice(2);\n  }, \"\");\n};\n\nvar slice = function slice(i, j, bs) {\n  return \"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\n};\n\nvar reverse = function reverse(hex) {\n  var rev = \"0x\";\n  for (var i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n  return rev;\n};\n\nvar pad = function pad(l, hex) {\n  return hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\n};\n\nvar padRight = function padRight(l, hex) {\n  return hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\n};\n\nvar toArray = function toArray(hex) {\n  var arr = [];\n  for (var i = 2, l = hex.length; i < l; i += 2) {\n    arr.push(parseInt(hex.slice(i, i + 2), 16));\n  }return arr;\n};\n\nvar fromArray = function fromArray(arr) {\n  var hex = \"0x\";\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    var b = arr[i];\n    hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n  }\n  return hex;\n};\n\nvar toUint8Array = function toUint8Array(hex) {\n  return new Uint8Array(toArray(hex));\n};\n\nvar fromUint8Array = function fromUint8Array(arr) {\n  return fromArray([].slice.call(arr, 0));\n};\n\nvar fromNumber = function fromNumber(num) {\n  var hex = num.toString(16);\n  return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\n\nvar toNumber = function toNumber(hex) {\n  return parseInt(hex.slice(2), 16);\n};\n\nvar concat = function concat(a, b) {\n  return a.concat(b.slice(2));\n};\n\nvar fromNat = function fromNat(bn) {\n  return bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\n};\n\nvar toNat = function toNat(bn) {\n  return bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\n};\n\nvar fromAscii = function fromAscii(ascii) {\n  var hex = \"0x\";\n  for (var i = 0; i < ascii.length; ++i) {\n    hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n  }return hex;\n};\n\nvar toAscii = function toAscii(hex) {\n  var ascii = \"\";\n  for (var i = 2; i < hex.length; i += 2) {\n    ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n  }return ascii;\n};\n\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nvar fromString = function fromString(s) {\n  var makeByte = function makeByte(uint8) {\n    var b = uint8.toString(16);\n    return b.length < 2 ? \"0\" + b : b;\n  };\n  var bytes = \"0x\";\n  for (var ci = 0; ci != s.length; ci++) {\n    var c = s.charCodeAt(ci);\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        var c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n    bytes += makeByte(c & 63 | 128);\n  }\n  return bytes;\n};\n\nvar toString = function toString(bytes) {\n  var s = '';\n  var i = 0;\n  var l = length(bytes);\n  while (i < l) {\n    var c = at(bytes, i++);\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n      ++i;\n    }\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else return null;\n  }\n  return s;\n};\n\nmodule.exports = {\n  random: random,\n  length: length,\n  concat: concat,\n  flatten: flatten,\n  slice: slice,\n  reverse: reverse,\n  pad: pad,\n  padRight: padRight,\n  fromAscii: fromAscii,\n  toAscii: toAscii,\n  fromString: fromString,\n  toString: toString,\n  fromNumber: fromNumber,\n  toNumber: toNumber,\n  fromNat: fromNat,\n  toNat: toNat,\n  fromArray: fromArray,\n  toArray: toArray,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array\n};","var generate = function generate(num, fn) {\n  var a = [];\n  for (var i = 0; i < num; ++i) {\n    a.push(fn(i));\n  }return a;\n};\n\nvar replicate = function replicate(num, val) {\n  return generate(num, function () {\n    return val;\n  });\n};\n\nvar concat = function concat(a, b) {\n  return a.concat(b);\n};\n\nvar flatten = function flatten(a) {\n  var r = [];\n  for (var j = 0, J = a.length; j < J; ++j) {\n    for (var i = 0, I = a[j].length; i < I; ++i) {\n      r.push(a[j][i]);\n    }\n  }return r;\n};\n\nvar chunksOf = function chunksOf(n, a) {\n  var b = [];\n  for (var i = 0, l = a.length; i < l; i += n) {\n    b.push(a.slice(i, i + n));\n  }return b;\n};\n\nmodule.exports = {\n  generate: generate,\n  replicate: replicate,\n  concat: concat,\n  flatten: flatten,\n  chunksOf: chunksOf\n};","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\nvar SolidityTypeDynamicBytes = function () {\n    this._inputFormatter = f.formatInputDynamicBytes;\n    this._outputFormatter = f.formatOutputDynamicBytes;\n};\n\nSolidityTypeDynamicBytes.prototype = new SolidityType({});\nSolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;\n\nSolidityTypeDynamicBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeDynamicBytes.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeDynamicBytes;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\n\n\nvar blockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n\nvar Eth = function Eth() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n        _this.personal.setProvider.apply(_this, arguments);\n        _this.accounts.setProvider.apply(_this, arguments);\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n    };\n\n\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    // add net\n    this.net = new Net(this.currentProvider);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n\n    // add accounts\n    this.accounts = new Accounts(this.currentProvider);\n\n    // add personal\n    this.personal = new Personal(this.currentProvider);\n    this.personal.defaultAccount = this.defaultAccount;\n\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n    };\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.setProvider(this.currentProvider, this.accounts);\n\n    // add IBAN\n    this.Iban = Iban;\n\n    // add ABI\n    this.abi = abi;\n\n\n    var methods = [\n        new Method({\n            name: 'getNodeInfo',\n            call: 'web3_clientVersion'\n        }),\n        new Method({\n            name: 'getProtocolVersion',\n            call: 'eth_protocolVersion',\n            params: 0\n        }),\n        new Method({\n            name: 'getCoinbase',\n            call: 'eth_coinbase',\n            params: 0\n        }),\n        new Method({\n            name: 'isMining',\n            call: 'eth_mining',\n            params: 0\n        }),\n        new Method({\n            name: 'getHashrate',\n            call: 'eth_hashrate',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isSyncing',\n            call: 'eth_syncing',\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getAccounts',\n            call: 'eth_accounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getBlockNumber',\n            call: 'eth_blockNumber',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBalance',\n            call: 'eth_getBalance',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getStorageAt',\n            call: 'eth_getStorageAt',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getBlock',\n            call: blockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getUncle',\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputBlockFormatter,\n\n        }),\n        new Method({\n            name: 'getBlockTransactionCount',\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBlockUncleCount',\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getTransaction',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionFromBlock',\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'sendSignedTransaction',\n            call: 'eth_sendRawTransaction',\n            params: 1,\n            inputFormatter: [null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'eth_signTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'eth_sendTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sign',\n            call: 'eth_sign',\n            params: 2,\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n            transformPayload: function (payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'estimateGas',\n            call: 'eth_estimateGas',\n            params: 1,\n            inputFormatter: [formatter.inputCallFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getCompilers',\n            call: 'eth_getCompilers',\n            params: 0\n        }),\n        new Method({\n            name: 'compile.solidity',\n            call: 'eth_compileSolidity',\n            params: 1\n        }),\n        new Method({\n            name: 'compile.lll',\n            call: 'eth_compileLLL',\n            params: 1\n        }),\n        new Method({\n            name: 'compile.serpent',\n            call: 'eth_compileSerpent',\n            params: 1\n        }),\n        new Method({\n            name: 'submitWork',\n            call: 'eth_submitWork',\n            params: 3\n        }),\n        new Method({\n            name: 'getWork',\n            call: 'eth_getWork',\n            params: 0\n        }),\n        new Method({\n            name: 'getPastLogs',\n            call: 'eth_getLogs',\n            params: 1,\n            inputFormatter: [formatter.inputLogFormatter],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n\n        // subscriptions\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    // TODO rename on RPC side?\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                'pendingTransactions': {\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                    params: 0\n                },\n                'logs': {\n                    params: 1,\n                    inputFormatter: [formatter.inputLogFormatter],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function (output) {\n                        if(output.removed) {\n                            this.emit('changed', output);\n                        } else {\n                            this.emit('data', output);\n                        }\n\n                        if (_.isFunction(this.callback)) {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                'syncing': {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function (output) {\n                        var _this = this;\n\n                        // fire TRUE at start\n                        if(this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit('changed', _this._isSyncing);\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n\n                            setTimeout(function () {\n                                _this.emit('data', output);\n\n                                if (_.isFunction(_this.callback)) {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n\n                            // fire sync status\n                        } else {\n                            this.emit('data', output);\n                            if (_.isFunction(_this.callback)) {\n                                this.callback(null, output, this);\n                            }\n\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function () {\n                                if(output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit('changed', _this._isSyncing);\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n    });\n\n};\n\ncore.addProviders(Eth);\n\n\nmodule.exports = Eth;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n\n\n    /**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function RequestManager(provider) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n\n    this.setProvider(provider);\n    this.subscriptions = {};\n};\n\n\n\nRequestManager.givenProvider = givenProvider;\n\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n\n\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object} p\n */\nRequestManager.prototype.setProvider = function (p, net) {\n    var _this = this;\n\n    // autodetect provider\n    if(p && typeof p === 'string' && this.providers) {\n\n        // HTTP\n        if(/^http(s)?:\\/\\//i.test(p)) {\n            p = new this.providers.HttpProvider(p);\n\n            // WS\n        } else if(/^ws(s)?:\\/\\//i.test(p)) {\n            p = new this.providers.WebsocketProvider(p);\n\n            // IPC\n        } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {\n            p = new this.providers.IpcProvider(p, net);\n\n        } else if(p) {\n            throw new Error('Can\\'t autodetect provider for \"'+ p +'\"');\n        }\n    }\n\n    // reset the old one before changing\n    if(this.provider)\n        this.clearSubscriptions();\n\n\n    this.provider = p || null;\n\n    // listen to incoming notifications\n    if(this.provider && this.provider.on) {\n        this.provider.on('data', function requestManagerNotification(result, deprecatedResult){\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n            // check for result.method, to prevent old providers errors to pass as result\n            if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\n                _this.subscriptions[result.params.subscription].callback(null, result.params.result);\n            }\n        });\n        // TODO add error, end, timeout, connect??\n        // this.provider.on('error', function requestManagerNotification(result){\n        //     Object.keys(_this.subscriptions).forEach(function(id){\n        //         if(_this.subscriptions[id].callback)\n        //             _this.subscriptions[id].callback(err);\n        //     });\n        // }\n    }\n};\n\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function(){};\n\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {\n        if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id \"'+ result.id +'\" (expected: \"'+ payload.id +'\") in '+ JSON.stringify(payload)));\n\n        if (err) {\n            return callback(err);\n        }\n\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!_.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(null, results);\n    });\n};\n\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {String} id           the subscription id\n * @param {String} name         the subscription name\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\n    if(this.provider.on) {\n        this.subscriptions[id] = {\n            callback: callback,\n            type: type,\n            name: name\n        };\n\n    } else {\n        throw new Error('The provider doesn\\'t support subscriptions: '+ this.provider.constructor.name);\n    }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    var _this = this;\n\n    if(this.subscriptions[id]) {\n\n        this.send({\n            method: this.subscriptions[id].type + '_unsubscribe',\n            params: [id]\n        }, callback);\n\n        // remove subscription\n        delete _this.subscriptions[id];\n    }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    var _this = this;\n\n\n    // uninstall all subscriptions\n    Object.keys(this.subscriptions).forEach(function(id){\n        if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')\n            _this.removeSubscription(id);\n    });\n\n\n    //  reset notification callbacks etc.\n    if(this.provider.reset)\n        this.provider.reset();\n};\n\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar core = require('web3-core');\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\n\n\nvar Net = function () {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n\n    [\n        new Method({\n            name: 'getId',\n            call: 'net_version',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isListening',\n            call: 'net_listening',\n            params: 0\n        }),\n        new Method({\n            name: 'getPeerCount',\n            call: 'net_peerCount',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        })\n    ].forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager);\n    });\n\n};\n\ncore.addProviders(Net);\n\n\nmodule.exports = Net;\n\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar oboe = require('oboe');\n\n\nvar IpcProvider = function IpcProvider(path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.notificationCallbacks = [];\n    this.path = path;\n\n    this.connection = net.connect({path: this.path});\n\n    this.addDefaultEvents();\n\n    // LISTEN FOR CONNECTION RESPONSES\n    var callback = function(result) {\n        /*jshint maxcomplexity: 6 */\n\n        var id = null;\n\n        // get the id which matches the returned id\n        if(_.isArray(result)) {\n            result.forEach(function(load){\n                if(_this.responseCallbacks[load.id])\n                    id = load.id;\n            });\n        } else {\n            id = result.id;\n        }\n\n        // notification\n        if(!id && result.method.indexOf('_subscription') !== -1) {\n            _this.notificationCallbacks.forEach(function(callback){\n                if(_.isFunction(callback))\n                    callback(result);\n            });\n\n            // fire the callback\n        } else if(_this.responseCallbacks[id]) {\n            _this.responseCallbacks[id](null, result);\n            delete _this.responseCallbacks[id];\n        }\n    };\n\n    // use oboe.js for Sockets\n    if (net.constructor.name === 'Socket') {\n        oboe(this.connection)\n        .done(callback);\n    } else {\n        this.connection.on('data', function(data){\n            _this._parseResponse(data.toString()).forEach(callback);\n        });\n    }\n};\n\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/\nIpcProvider.prototype.addDefaultEvents = function(){\n    var _this = this;\n\n    this.connection.on('connect', function(){\n    });\n\n    this.connection.on('error', function(){\n        _this._timeout();\n    });\n\n    this.connection.on('end', function(){\n        _this._timeout();\n    });\n\n    this.connection.on('timeout', function(){\n        _this._timeout();\n    });\n};\n\n\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */\nIpcProvider.prototype._parseResponse = function(data) {\n    var _this = this,\n        returnValues = [];\n\n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g,'}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g,'}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g,'}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g,'}]|--|{') // }]{\n        .split('|--|');\n\n    dechunkedData.forEach(function(data){\n\n        // prepend the last chunk\n        if(_this.lastChunk)\n            data = _this.lastChunk + data;\n\n        var result = null;\n\n        try {\n            result = JSON.parse(data);\n\n        } catch(e) {\n\n            _this.lastChunk = data;\n\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function(){\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n\n            return;\n        }\n\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n\n        if(result)\n            returnValues.push(result);\n    });\n\n    return returnValues;\n};\n\n\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function() {\n    for(var key in this.responseCallbacks) {\n        if(this.responseCallbacks.hasOwnProperty(key)){\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n\n/**\n Try to reconnect\n\n @method reconnect\n */\nIpcProvider.prototype.reconnect = function() {\n    this.connection.connect({path: this.path});\n};\n\n\nIpcProvider.prototype.send = function (payload, callback) {\n    // try reconnect, when connection is gone\n    if(!this.connection.writable)\n        this.connection.connect({path: this.path});\n\n\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.on = function (type, callback) {\n\n    if(typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n\n    switch(type){\n        case 'data':\n            this.notificationCallbacks.push(callback);\n            break;\n\n        // adds error, end, timeout, connect\n        default:\n            this.connection.on(type, callback);\n            break;\n    }\n};\n\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\nIpcProvider.prototype.once = function (type, callback) {\n\n    if(typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n\n    this.connection.once(type, callback);\n};\n\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.removeListener = function (type, callback) {\n    var _this = this;\n\n    switch(type){\n        case 'data':\n            this.notificationCallbacks.forEach(function(cb, index){\n                if(cb === callback)\n                    _this.notificationCallbacks.splice(index, 1);\n            });\n            break;\n\n        default:\n            this.connection.removeListener(type, callback);\n            break;\n    }\n};\n\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/\nIpcProvider.prototype.removeAllListeners = function (type) {\n    switch(type){\n        case 'data':\n            this.notificationCallbacks = [];\n            break;\n\n        default:\n            this.connection.removeAllListeners(type);\n            break;\n    }\n};\n\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/\nIpcProvider.prototype.reset = function () {\n    this._timeout();\n    this.notificationCallbacks = [];\n\n    this.connection.removeAllListeners('error');\n    this.connection.removeAllListeners('end');\n    this.connection.removeAllListeners('timeout');\n\n    this.addDefaultEvents();\n};\n\nmodule.exports = IpcProvider;\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Bytes = require(\"./bytes\");\nvar Nat = require(\"./nat\");\nvar elliptic = require(\"elliptic\");\nvar rlp = require(\"./rlp\");\nvar secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\n\nvar _require = require(\"./hash\"),\n    keccak256 = _require.keccak256,\n    keccak256s = _require.keccak256s;\n\nvar create = function create(entropy) {\n  var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  var outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nvar toChecksum = function toChecksum(address) {\n  var addressHash = keccak256s(address.slice(2));\n  var checksumAddress = \"0x\";\n  for (var i = 0; i < 40; i++) {\n    checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  }return checksumAddress;\n};\n\nvar fromPrivate = function fromPrivate(privateKey) {\n  var buffer = new Buffer(privateKey.slice(2), \"hex\");\n  var ecKey = secp256k1.keyFromPrivate(buffer);\n  var publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nvar encodeSignature = function encodeSignature(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      v = _ref2[0],\n      r = Bytes.pad(32, _ref2[1]),\n      s = Bytes.pad(32, _ref2[2]);\n\n  return Bytes.flatten([r, s, v]);\n};\n\nvar decodeSignature = function decodeSignature(hex) {\n  return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n};\n\nvar makeSigner = function makeSigner(addToV) {\n  return function (hash, privateKey) {\n    var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n    return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n  };\n};\n\nvar sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nvar recover = function recover(hash, signature) {\n  var vals = decodeSignature(signature);\n  var vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  var publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create: create,\n  toChecksum: toChecksum,\n  fromPrivate: fromPrivate,\n  sign: sign,\n  makeSigner: makeSigner,\n  recover: recover,\n  encodeSignature: encodeSignature,\n  decodeSignature: decodeSignature\n};","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file extend.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar formatters = require('web3-core-helpers').formatters;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\n\n\nvar extend = function (pckg) {\n    /* jshint maxcomplexity:5 */\n    var ex = function (extension) {\n\n        var extendedObject;\n        if (extension.property) {\n            if (!pckg[extension.property]) {\n                pckg[extension.property] = {};\n            }\n            extendedObject = pckg[extension.property];\n        } else {\n            extendedObject = pckg;\n        }\n\n        if (extension.methods) {\n            extension.methods.forEach(function (method) {\n                if(!(method instanceof Method)) {\n                    method = new Method(method);\n                }\n\n                method.attachToObject(extendedObject);\n                method.setRequestManager(pckg._requestManager);\n            });\n        }\n\n        return pckg;\n    };\n\n    ex.formatters = formatters;\n    ex.utils = utils;\n    ex.Method = Method;\n\n    return ex;\n};\n\n\n\nmodule.exports = extend;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeBytes is a prototype that represents the bytes type.\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes8[4]\n * bytes[3][]\n */\nvar SolidityTypeBytes = function () {\n    this._inputFormatter = f.formatInputBytes;\n    this._outputFormatter = f.formatOutputBytes;\n};\n\nSolidityTypeBytes.prototype = new SolidityType({});\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;\n\nSolidityTypeBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBytes;\n","var f = require('./formatters');\nvar SolidityParam = require('./param');\n\n/**\n * SolidityType prototype is used to encode/decode solidity params of certain type\n */\nvar SolidityType = function (config) {\n    this._inputFormatter = config.inputFormatter;\n    this._outputFormatter = config.outputFormatter;\n};\n\n/**\n * Should be used to determine if this SolidityType do match given name\n *\n * @method isType\n * @param {String} name\n * @return {Bool} true if type match this SolidityType, otherwise false\n */\nSolidityType.prototype.isType = function (name) {\n    throw \"This method should be overwritten for type \" + name;\n};\n\n/**\n * Should be used to determine what is the length of static part in given type\n *\n * @method staticPartLength\n * @param {String} name\n * @return {Number} length of static part in bytes\n */\nSolidityType.prototype.staticPartLength = function (name) {\n    // If name isn't an array then treat it like a single element array.\n    return (this.nestedTypes(name) || ['[1]'])\n        .map(function (type) {\n            // the length of the nested array\n            return parseInt(type.slice(1, -1), 10) || 1;\n        })\n        .reduce(function (previous, current) {\n            return previous * current;\n        // all basic types are 32 bytes long\n        }, 32);\n};\n\n/**\n * Should be used to determine if type is dynamic array\n * eg:\n * \"type[]\" => true\n * \"type[4]\" => false\n *\n * @method isDynamicArray\n * @param {String} name\n * @return {Bool} true if the type is dynamic array\n */\nSolidityType.prototype.isDynamicArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should be used to determine if type is static array\n * eg:\n * \"type[]\" => false\n * \"type[4]\" => true\n *\n * @method isStaticArray\n * @param {String} name\n * @return {Bool} true if the type is static array\n */\nSolidityType.prototype.isStaticArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should return length of static array\n * eg.\n * \"int[32]\" => 32\n * \"int256[14]\" => 14\n * \"int[2][3]\" => 3\n * \"int\" => 1\n * \"int[1]\" => 1\n * \"int[]\" => 1\n *\n * @method staticArrayLength\n * @param {String} name\n * @return {Number} static array length\n */\nSolidityType.prototype.staticArrayLength = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    if (nestedTypes) {\n       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);\n    }\n    return 1;\n};\n\n/**\n * Should return nested type\n * eg.\n * \"int[32]\" => \"int\"\n * \"int256[14]\" => \"int256\"\n * \"int[2][3]\" => \"int[2]\"\n * \"int\" => \"int\"\n * \"int[]\" => \"int\"\n *\n * @method nestedName\n * @param {String} name\n * @return {String} nested name\n */\nSolidityType.prototype.nestedName = function (name) {\n    // remove last [] in name\n    var nestedTypes = this.nestedTypes(name);\n    if (!nestedTypes) {\n        return name;\n    }\n\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);\n};\n\n/**\n * Should return true if type has dynamic size by default\n * such types are \"string\", \"bytes\"\n *\n * @method isDynamicType\n * @param {String} name\n * @return {Bool} true if is dynamic, otherwise false\n */\nSolidityType.prototype.isDynamicType = function () {\n    return false;\n};\n\n/**\n * Should return array of nested types\n * eg.\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]\n * \"int[] => [\"[]\"]\n * \"int\" => null\n *\n * @method nestedTypes\n * @param {String} name\n * @return {Array} array of nested types\n */\nSolidityType.prototype.nestedTypes = function (name) {\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"\n    return name.match(/(\\[[0-9]*\\])/g);\n};\n\n/**\n * Should be used to encode the value\n *\n * @method encode\n * @param {Object} value\n * @param {String} name\n * @return {String} encoded value\n */\nSolidityType.prototype.encode = function (value, name) {\n    var self = this;\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var length = value.length;                          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            result.push(f.formatInputInt(length).encode());\n\n            value.forEach(function (v) {\n                result.push(self.encode(v, nestedName));\n            });\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            for (var i = 0; i < length; i++) {\n                result.push(self.encode(value[i], nestedName));\n            }\n\n            return result;\n        })();\n\n    }\n\n    return this._inputFormatter(value, name).encode();\n};\n\n/**\n * Should be used to decode value from bytes\n *\n * @method decode\n * @param {String} bytes\n * @param {Number} offset in bytes\n * @param {String} name type name\n * @returns {Object} decoded value\n */\nSolidityType.prototype.decode = function (bytes, offset, name) {\n    var self = this;\n\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes\n            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int\n            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);                      // in int\n            var arrayStart = offset;                                        // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n    } else if (this.isDynamicType(name)) {\n\n        return (function () {\n            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes\n            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes\n            var roundedLength = Math.floor((length + 31) / 32);                     // in int\n            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0, bytes);\n            return self._outputFormatter(param, name);\n        })();\n    }\n\n    var length = this.staticPartLength(name);\n    var param = new SolidityParam(bytes.substr(offset * 2, length * 2), undefined, bytes);\n    return this._outputFormatter(param, name);\n};\n\nmodule.exports = SolidityType;\n","\nvar rng;\n\nif (global.crypto && crypto.getRandomValues) {\n  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n  // Moderately fast, high quality\n  var _rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(_rnds8);\n    return _rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  _rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return _rnds;\n  };\n}\n\nmodule.exports = rng;\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file contract.js\n *\n * To initialize a contract use:\n *\n *  var Contract = require('web3-eth-contract');\n *  Contract.setProvider('ws://localhost:8546');\n *  var contract = new Contract(abi, address, ...);\n *\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Subscription = require('web3-core-subscriptions').subscription;\nvar formatters = require('web3-core-helpers').formatters;\nvar errors = require('web3-core-helpers').errors;\nvar promiEvent = require('web3-core-promievent');\nvar abi = require('web3-eth-abi');\n\n\n/**\n * Should be called to create new contract instance\n *\n * @method Contract\n * @constructor\n * @param {Array} jsonInterface\n * @param {String} address\n * @param {Object} options\n */\nvar Contract = function Contract(jsonInterface, address, options) {\n    var _this = this,\n        args = Array.prototype.slice.call(arguments);\n\n    if(!(this instanceof Contract)) {\n        throw new Error('Please use the \"new\" keyword to instantiate a web3.eth.contract() object!');\n    }\n\n    // sets _requestmanager\n    core.packageInit(this, [this.constructor.currentProvider]);\n\n    this.clearSubscriptions = this._requestManager.clearSubscriptions;\n\n\n\n    if(!jsonInterface || !(Array.isArray(jsonInterface))) {\n        throw new Error('You must provide the json interface of the contract when instantiating a contract object.');\n    }\n\n\n\n    // create the options object\n    this.options = {};\n\n    var lastArg = args[args.length - 1];\n    if(_.isObject(lastArg) && !_.isArray(lastArg)) {\n        options = lastArg;\n\n        this.options = _.extend(this.options, this._getOrSetDefaultOptions(options));\n        if(_.isObject(address)) {\n            address = null;\n        }\n    }\n\n    // set address\n    Object.defineProperty(this.options, 'address', {\n        set: function(value){\n            if(value) {\n                _this._address = utils.toChecksumAddress(formatters.inputAddressFormatter(value));\n            }\n        },\n        get: function(){\n            return _this._address;\n        },\n        enumerable: true\n    });\n\n    // add method and event signatures, when the jsonInterface gets set\n    Object.defineProperty(this.options, 'jsonInterface', {\n        set: function(value){\n            _this.methods = {};\n            _this.events = {};\n\n            _this._jsonInterface = value.map(function(method) {\n                var func,\n                    funcName;\n\n                if (method.name) {\n                    funcName = utils._jsonInterfaceMethodToString(method);\n                }\n\n\n                // function\n                if (method.type === 'function') {\n                    method.signature = abi.encodeFunctionSignature(funcName);\n                    func = _this._createTxObject.bind({\n                        method: method,\n                        parent: _this\n                    });\n\n\n                    // add method only if not one already exists\n                    if(!_this.methods[method.name]) {\n                        _this.methods[method.name] = func;\n                    } else {\n                        var cascadeFunc = _this._createTxObject.bind({\n                            method: method,\n                            parent: _this,\n                            nextMethod: _this.methods[method.name]\n                        });\n                        _this.methods[method.name] = cascadeFunc;\n                    }\n\n                    // definitely add the method based on its signature\n                    _this.methods[method.signature] = func;\n\n                    // add method by name\n                    _this.methods[funcName] = func;\n\n\n                // event\n                } else if (method.type === 'event') {\n                    method.signature = abi.encodeEventSignature(funcName);\n                    var event = _this._on.bind(_this, method.signature);\n\n                    // add method only if not already exists\n                    if(!_this.events[method.name] || _this.events[method.name].name === 'bound ')\n                        _this.events[method.name] = event;\n\n                    // definitely add the method based on its signature\n                    _this.events[method.signature] = event;\n\n                    // add event by name\n                    _this.events[funcName] = event;\n                }\n\n\n                return method;\n            });\n\n            // add allEvents\n            _this.events.allEvents = _this._on.bind(_this, 'allevents');\n\n            return _this._jsonInterface;\n        },\n        get: function(){\n            return _this._jsonInterface;\n        },\n        enumerable: true\n    });\n\n    // get default account from the Class\n    var defaultAccount = this.constructor.defaultAccount;\n    var defaultBlock = this.constructor.defaultBlock || 'latest';\n\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));\n            }\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n\n            return val;\n        },\n        enumerable: true\n    });\n\n    // properties\n    this.methods = {};\n    this.events = {};\n\n    this._address = null;\n    this._jsonInterface = [];\n\n    // set getter/setter properties\n    this.options.address = address;\n    this.options.jsonInterface = jsonInterface;\n\n};\n\nContract.setProvider = function(provider, accounts) {\n    // Contract.currentProvider = provider;\n    core.packageInit(this, [provider]);\n\n    this._ethAccounts = accounts;\n};\n\n\n/**\n * Get the callback and modiufy the array if necessary\n *\n * @method _getCallback\n * @param {Array} args\n * @return {Function} the callback\n */\nContract.prototype._getCallback = function getCallback(args) {\n    if (args && _.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Checks that no listener with name \"newListener\" or \"removeListener\" is added.\n *\n * @method _checkListener\n * @param {String} type\n * @param {String} event\n * @return {Object} the contract instance\n */\nContract.prototype._checkListener = function(type, event){\n    if(event === type) {\n        throw new Error('The event \"'+ type +'\" is a reserved event name, you can\\'t use it.');\n    }\n};\n\n\n/**\n * Use default values, if options are not available\n *\n * @method _getOrSetDefaultOptions\n * @param {Object} options the options gived by the user\n * @return {Object} the options with gaps filled by defaults\n */\nContract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {\n    var gasPrice = options.gasPrice ? String(options.gasPrice): null;\n    var from = options.from ? utils.toChecksumAddress(formatters.inputAddressFormatter(options.from)) : null;\n\n    options.data = options.data || this.options.data;\n\n    options.from = from || this.options.from;\n    options.gasPrice = gasPrice || this.options.gasPrice;\n    options.gas = options.gas || options.gasLimit || this.options.gas;\n\n    // TODO replace with only gasLimit?\n    delete options.gasLimit;\n\n    return options;\n};\n\n\n/**\n * Should be used to encode indexed params and options to one final object\n *\n * @method _encodeEventABI\n * @param {Object} event\n * @param {Object} options\n * @return {Object} everything combined together and encoded\n */\nContract.prototype._encodeEventABI = function (event, options) {\n    options = options || {};\n    var filter = options.filter || {},\n        result = {};\n\n    ['fromBlock', 'toBlock'].filter(function (f) {\n        return options[f] !== undefined;\n    }).forEach(function (f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);\n    });\n\n    // use given topics\n    if(_.isArray(options.topics)) {\n        result.topics = options.topics;\n\n    // create topics based on filter\n    } else {\n\n        result.topics = [];\n\n        // add event signature\n        if (event && !event.anonymous && event.name !== 'ALLEVENTS') {\n            result.topics.push(event.signature);\n        }\n\n        // add event topics (indexed arguments)\n        if (event.name !== 'ALLEVENTS') {\n            var indexedTopics = event.inputs.filter(function (i) {\n                return i.indexed === true;\n            }).map(function (i) {\n                var value = filter[i.name];\n                if (!value) {\n                    return null;\n                }\n\n                // TODO: https://github.com/ethereum/web3.js/issues/344\n\n                if (_.isArray(value)) {\n                    return value.map(function (v) {\n                        return abi.encodeParameter(i.type, v);\n                    });\n                }\n                return abi.encodeParameter(i.type, value);\n            });\n\n            result.topics = result.topics.concat(indexedTopics);\n        }\n\n        if(!result.topics.length)\n            delete result.topics;\n    }\n\n    if(this.options.address) {\n        result.address = this.options.address.toLowerCase();\n    }\n\n    return result;\n};\n\n/**\n * Should be used to decode indexed params and options\n *\n * @method _decodeEventABI\n * @param {Object} data\n * @return {Object} result object with decoded indexed && not indexed params\n */\nContract.prototype._decodeEventABI = function (data) {\n    var event = this;\n\n    data.data = data.data || '';\n    data.topics = data.topics || [];\n    var result = formatters.outputLogFormatter(data);\n\n    // if allEvents get the right event\n    if(event.name === 'ALLEVENTS') {\n        event = event.jsonInterface.find(function (intf) {\n            return (intf.signature === data.topics[0]);\n        }) || {anonymous: true};\n    }\n\n    // create empty inputs if none are present (e.g. anonymous events on allEvents)\n    event.inputs = event.inputs || [];\n\n\n    var argTopics = event.anonymous ? data.topics : data.topics.slice(1);\n\n    result.returnValues = abi.decodeLog(event.inputs, data.data, argTopics);\n    delete result.returnValues.__length__;\n\n    // add name\n    result.event = event.name;\n\n    // add signature\n    result.signature = (event.anonymous || !data.topics[0]) ? null : data.topics[0];\n\n    // move the data and topics to \"raw\"\n    result.raw = {\n        data: result.data,\n        topics: result.topics\n    };\n    delete result.data;\n    delete result.topics;\n\n\n    return result;\n};\n\n/**\n * Encodes an ABI for a method, including signature or the method.\n * Or when constructor encodes only the constructor parameters.\n *\n * @method _encodeMethodABI\n * @param {Mixed} args the arguments to encode\n * @param {String} the encoded ABI\n */\nContract.prototype._encodeMethodABI = function _encodeMethodABI() {\n    var methodSignature = this._method.signature,\n        args = this.arguments || [];\n\n    var signature = false,\n        paramsABI = this._parent.options.jsonInterface.filter(function (json) {\n            return ((methodSignature === 'constructor' && json.type === methodSignature) ||\n                ((json.signature === methodSignature || json.signature === methodSignature.replace('0x','') || json.name === methodSignature) && json.type === 'function'));\n        }).map(function (json) {\n            var inputLength = (_.isArray(json.inputs)) ? json.inputs.length : 0;\n\n            if (inputLength !== args.length) {\n                throw new Error('The number of arguments is not matching the methods required number. You need to pass '+ inputLength +' arguments.');\n            }\n\n            if (json.type === 'function') {\n                signature = json.signature;\n            }\n            return _.isArray(json.inputs) ? json.inputs.map(function (input) { return input.type; }) : [];\n        }).map(function (types) {\n            return abi.encodeParameters(types, args).replace('0x','');\n        })[0] || '';\n\n    // return constructor\n    if(methodSignature === 'constructor') {\n        if(!this._deployData)\n            throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');\n\n        return this._deployData + paramsABI;\n\n    // return method\n    } else {\n\n        var returnValue = (signature) ? signature + paramsABI : paramsABI;\n\n        if(!returnValue) {\n            throw new Error('Couldn\\'t find a matching contract method named \"'+ this._method.name +'\".');\n        } else {\n            return returnValue;\n        }\n    }\n\n};\n\n\n/**\n * Decode method return values\n *\n * @method _decodeMethodReturn\n * @param {Array} outputs\n * @param {String} returnValues\n * @return {Object} decoded output return values\n */\nContract.prototype._decodeMethodReturn = function (outputs, returnValues) {\n    if (!returnValues) {\n        return null;\n    }\n\n    returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;\n    var result = abi.decodeParameters(outputs, returnValues);\n\n    if (result.__length__ === 1) {\n        return result[0];\n    } else {\n        delete result.__length__;\n        return result;\n    }\n};\n\n\n/**\n * Deploys a contract and fire events based on its state: transactionHash, receipt\n *\n * All event listeners will be removed, once the last possible event is fired (\"error\", or \"receipt\")\n *\n * @method deploy\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} EventEmitter possible events are \"error\", \"transactionHash\" and \"receipt\"\n */\nContract.prototype.deploy = function(options, callback){\n\n    options = options || {};\n\n    options.arguments = options.arguments || [];\n    options = this._getOrSetDefaultOptions(options);\n\n\n    // return error, if no \"data\" is specified\n    if(!options.data) {\n        return utils._fireError(new Error('No \"data\" specified in neither the given options, nor the default options.'), null, null, callback);\n    }\n\n    var constructor = _.find(this.options.jsonInterface, function (method) {\n        return (method.type === 'constructor');\n    }) || {};\n    constructor.signature = 'constructor';\n\n    return this._createTxObject.apply({\n        method: constructor,\n        parent: this,\n        deployData: options.data,\n        _ethAccounts: this.constructor._ethAccounts\n    }, options.arguments);\n\n};\n\n/**\n * Gets the event signature and outputformatters\n *\n * @method _generateEventOptions\n * @param {Object} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the event options object\n */\nContract.prototype._generateEventOptions = function() {\n    var args = Array.prototype.slice.call(arguments);\n\n    // get the callback\n    var callback = this._getCallback(args);\n\n    // get the options\n    var options = (_.isObject(args[args.length - 1])) ? args.pop() : {};\n\n    var event = (_.isString(args[0])) ? args[0] : 'allevents';\n    event = (event.toLowerCase() === 'allevents') ? {\n            name: 'ALLEVENTS',\n            jsonInterface: this.options.jsonInterface\n        } : this.options.jsonInterface.find(function (json) {\n            return (json.type === 'event' && (json.name === event || json.signature === '0x'+ event.replace('0x','')));\n        });\n\n    if (!event) {\n        throw new Error('Event \"' + event.name + '\" doesn\\'t exist in this contract.');\n    }\n\n    if (!utils.isAddress(this.options.address)) {\n        throw new Error('This contract object doesn\\'t have address set yet, please set an address first.');\n    }\n\n    return {\n        params: this._encodeEventABI(event, options),\n        event: event,\n        callback: callback\n    };\n};\n\n/**\n * Adds event listeners and creates a subscription, and remove it once its fired.\n *\n * @method clone\n * @return {Object} the event subscription\n */\nContract.prototype.clone = function() {\n    return new this.constructor(this.options.jsonInterface, this.options.address, this.options);\n};\n\n\n/**\n * Adds event listeners and creates a subscription, and remove it once its fired.\n *\n * @method once\n * @param {String} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the event subscription\n */\nContract.prototype.once = function(event, options, callback) {\n    var args = Array.prototype.slice.call(arguments);\n\n    // get the callback\n    callback = this._getCallback(args);\n\n    if (!callback) {\n        throw new Error('Once requires a callback as the second parameter.');\n    }\n\n    // don't allow fromBlock\n    if (options)\n        delete options.fromBlock;\n\n    // don't return as once shouldn't provide \"on\"\n    this._on(event, options, function (err, res, sub) {\n        sub.unsubscribe();\n        if(_.isFunction(callback)){\n            callback(err, res, sub);\n        }\n    });\n\n    return undefined;\n};\n\n/**\n * Adds event listeners and creates a subscription.\n *\n * @method _on\n * @param {String} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the event subscription\n */\nContract.prototype._on = function(){\n    var subOptions = this._generateEventOptions.apply(this, arguments);\n\n\n    // prevent the event \"newListener\" and \"removeListener\" from being overwritten\n    this._checkListener('newListener', subOptions.event.name, subOptions.callback);\n    this._checkListener('removeListener', subOptions.event.name, subOptions.callback);\n\n    // TODO check if listener already exists? and reuse subscription if options are the same.\n\n    // create new subscription\n    var subscription = new Subscription({\n        subscription: {\n            params: 1,\n            inputFormatter: [formatters.inputLogFormatter],\n            outputFormatter: this._decodeEventABI.bind(subOptions.event),\n            // DUBLICATE, also in web3-eth\n            subscriptionHandler: function (output) {\n                if(output.removed) {\n                    this.emit('changed', output);\n                } else {\n                    this.emit('data', output);\n                }\n\n                if (_.isFunction(this.callback)) {\n                    this.callback(null, output, this);\n                }\n            }\n        },\n        type: 'eth',\n        requestManager: this._requestManager\n    });\n    subscription.subscribe('logs', subOptions.params, subOptions.callback || function () {});\n\n    return subscription;\n};\n\n/**\n * Get past events from contracts\n *\n * @method getPastEvents\n * @param {String} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the promievent\n */\nContract.prototype.getPastEvents = function(){\n    var subOptions = this._generateEventOptions.apply(this, arguments);\n\n    var getPastLogs = new Method({\n        name: 'getPastLogs',\n        call: 'eth_getLogs',\n        params: 1,\n        inputFormatter: [formatters.inputLogFormatter],\n        outputFormatter: this._decodeEventABI.bind(subOptions.event)\n    });\n    getPastLogs.setRequestManager(this._requestManager);\n    var call = getPastLogs.buildCall();\n\n    getPastLogs = null;\n\n    return call(subOptions.params, subOptions.callback);\n};\n\n\n/**\n * returns the an object with call, send, estimate functions\n *\n * @method _createTxObject\n * @returns {Object} an object with functions to call the methods\n */\nContract.prototype._createTxObject =  function _createTxObject(){\n    var args = Array.prototype.slice.call(arguments);\n    var txObject = {};\n\n    if(this.method.type === 'function') {\n\n        txObject.call = this.parent._executeMethod.bind(txObject, 'call');\n        txObject.call.request = this.parent._executeMethod.bind(txObject, 'call', true); // to make batch requests\n\n    }\n\n    txObject.send = this.parent._executeMethod.bind(txObject, 'send');\n    txObject.send.request = this.parent._executeMethod.bind(txObject, 'send', true); // to make batch requests\n    txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);\n    txObject.estimateGas = this.parent._executeMethod.bind(txObject, 'estimate');\n\n    if (args && this.method.inputs && args.length !== this.method.inputs.length) {\n        if (this.nextMethod) {\n            return this.nextMethod.apply(null, args);\n        }\n        throw errors.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);\n    }\n\n    txObject.arguments = args || [];\n    txObject._method = this.method;\n    txObject._parent = this.parent;\n    txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;\n\n    if(this.deployData) {\n        txObject._deployData = this.deployData;\n    }\n\n    return txObject;\n};\n\n\n/**\n * Generates the options for the execute call\n *\n * @method _processExecuteArguments\n * @param {Array} args\n * @param {Promise} defer\n */\nContract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {\n    var processedArgs = {};\n\n    processedArgs.type = args.shift();\n\n    // get the callback\n    processedArgs.callback = this._parent._getCallback(args);\n\n    // get block number to use for call\n    if(processedArgs.type === 'call' && args[args.length - 1] !== true && (_.isString(args[args.length - 1]) || isFinite(args[args.length - 1])))\n        processedArgs.defaultBlock = args.pop();\n\n    // get the options\n    processedArgs.options = (_.isObject(args[args.length - 1])) ? args.pop() : {};\n\n    // get the generateRequest argument for batch requests\n    processedArgs.generateRequest = (args[args.length - 1] === true)? args.pop() : false;\n\n    processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);\n    processedArgs.options.data = this.encodeABI();\n\n    // add contract address\n    if(!this._deployData && !utils.isAddress(this._parent.options.address))\n        throw new Error('This contract object doesn\\'t have address set yet, please set an address first.');\n\n    if(!this._deployData)\n        processedArgs.options.to = this._parent.options.address;\n\n    // return error, if no \"data\" is specified\n    if(!processedArgs.options.data)\n        return utils._fireError(new Error('Couldn\\'t find a matching contract method, or the number of parameters is wrong.'), defer.eventEmitter, defer.reject, processedArgs.callback);\n\n    return processedArgs;\n};\n\n/**\n * Executes a call, transact or estimateGas on a contract function\n *\n * @method _executeMethod\n * @param {String} type the type this execute function should execute\n * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it\n */\nContract.prototype._executeMethod = function _executeMethod(){\n    var _this = this,\n        args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer),\n        defer = promiEvent((args.type !== 'send')),\n        ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;\n\n    // simple return request for batch requests\n    if(args.generateRequest) {\n\n        var payload = {\n            params: [formatters.inputCallFormatter.call(this._parent, args.options)],\n            callback: args.callback\n        };\n\n        if(args.type === 'call') {\n            payload.params.push(formatters.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));\n            payload.method = 'eth_call';\n            payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);\n        } else {\n            payload.method = 'eth_sendTransaction';\n        }\n\n        return payload;\n\n    } else {\n\n        switch (args.type) {\n            case 'estimate':\n\n                var estimateGas = (new Method({\n                    name: 'estimateGas',\n                    call: 'eth_estimateGas',\n                    params: 1,\n                    inputFormatter: [formatters.inputCallFormatter],\n                    outputFormatter: utils.hexToNumber,\n                    requestManager: _this._parent._requestManager,\n                    accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)\n                    defaultAccount: _this._parent.defaultAccount,\n                    defaultBlock: _this._parent.defaultBlock\n                })).createFunction();\n\n                return estimateGas(args.options, args.callback);\n\n            case 'call':\n\n                // TODO check errors: missing \"from\" should give error on deploy and send, call ?\n\n                var call = (new Method({\n                    name: 'call',\n                    call: 'eth_call',\n                    params: 2,\n                    inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],\n                    // add output formatter for decoding\n                    outputFormatter: function (result) {\n                        return _this._parent._decodeMethodReturn(_this._method.outputs, result);\n                    },\n                    requestManager: _this._parent._requestManager,\n                    accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)\n                    defaultAccount: _this._parent.defaultAccount,\n                    defaultBlock: _this._parent.defaultBlock\n                })).createFunction();\n\n                return call(args.options, args.defaultBlock, args.callback);\n\n            case 'send':\n\n                // return error, if no \"from\" is specified\n                if(!utils.isAddress(args.options.from)) {\n                    return utils._fireError(new Error('No \"from\" address specified in neither the given options, nor the default options.'), defer.eventEmitter, defer.reject, args.callback);\n                }\n\n                if (_.isBoolean(this._method.payable) && !this._method.payable && args.options.value && args.options.value > 0) {\n                    return utils._fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject, args.callback);\n                }\n\n\n                // make sure receipt logs are decoded\n                var extraFormatters = {\n                    receiptFormatter: function (receipt) {\n                        if (_.isArray(receipt.logs)) {\n\n                            // decode logs\n                            var events = _.map(receipt.logs, function(log) {\n                                return _this._parent._decodeEventABI.call({\n                                    name: 'ALLEVENTS',\n                                    jsonInterface: _this._parent.options.jsonInterface\n                                }, log);\n                            });\n\n                            // make log names keys\n                            receipt.events = {};\n                            var count = 0;\n                            events.forEach(function (ev) {\n                                if (ev.event) {\n                                    // if > 1 of the same event, don't overwrite any existing events\n                                    if (receipt.events[ev.event]) {\n                                        if (Array.isArray(receipt.events[ ev.event ])) {\n                                            receipt.events[ ev.event ].push(ev);\n                                        } else {\n                                            receipt.events[ev.event] = [receipt.events[ev.event], ev];\n                                        }\n                                    } else {\n                                        receipt.events[ ev.event ] = ev;\n                                    }\n                                } else {\n                                    receipt.events[count] = ev;\n                                    count++;\n                                }\n                            });\n\n                            delete receipt.logs;\n                        }\n                        return receipt;\n                    },\n                    contractDeployFormatter: function (receipt) {\n                        var newContract = _this._parent.clone();\n                        newContract.options.address = receipt.contractAddress;\n                        return newContract;\n                    }\n                };\n\n                var sendTransaction = (new Method({\n                    name: 'sendTransaction',\n                    call: 'eth_sendTransaction',\n                    params: 1,\n                    inputFormatter: [formatters.inputTransactionFormatter],\n                    requestManager: _this._parent._requestManager,\n                    accounts: _this.constructor._ethAccounts || _this._ethAccounts, // is eth.accounts (necessary for wallet signing)\n                    defaultAccount: _this._parent.defaultAccount,\n                    defaultBlock: _this._parent.defaultBlock,\n                    extraFormatters: extraFormatters\n                })).createFunction();\n\n                return sendTransaction(args.options, args.callback);\n\n        }\n\n    }\n\n};\n\nmodule.exports = Contract;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./types/address');\nvar SolidityTypeBool = require('./types/bool');\nvar SolidityTypeInt = require('./types/int');\nvar SolidityTypeUInt = require('./types/uint');\nvar SolidityTypeDynamicBytes = require('./types/dynamicbytes');\nvar SolidityTypeString = require('./types/string');\nvar SolidityTypeBytes = require('./types/bytes');\n\nvar isDynamic = function (solidityType, type) {\n    return solidityType.isDynamicType(type) ||\n        solidityType.isDynamicArray(type);\n};\n\n\n// result method\nfunction Result() {}\n\n\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\nvar ABICoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nABICoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('Invalid solidity type: ' + type);\n    }\n\n    return solidityType;\n};\n\n\n\nABICoder.prototype._getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n        // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nABICoder.prototype._getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\n\nABICoder.prototype._encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\n// TODO: refactor whole encoding!\nABICoder.prototype._encodeWithOffset = function (type, solidityType, encoded, offset) {\n    var self = this;\n    if (solidityType.isDynamicArray(type)) {\n        return (function () {\n            // offset was already set\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = encoded[0];\n\n            (function () {\n                var previousLength = 2; // in int\n                if (solidityType.isDynamicArray(nestedName)) {\n                    for (var i = 1; i < encoded.length; i++) {\n                        previousLength += +(encoded[i - 1])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                }\n            })();\n\n            // first element is length, skip it\n            (function () {\n                for (var i = 0; i < encoded.length - 1; i++) {\n                    var additionalOffset = result / 2;\n                    result += self._encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n\n    } else if (solidityType.isStaticArray(type)) {\n        return (function () {\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = \"\";\n\n\n            if (solidityType.isDynamicArray(nestedName)) {\n                (function () {\n                    var previousLength = 0; // in int\n                    for (var i = 0; i < encoded.length; i++) {\n                        // calculate length of previous item\n                        previousLength += +(encoded[i - 1] || [])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                })();\n            }\n\n            (function () {\n                for (var i = 0; i < encoded.length; i++) {\n                    var additionalOffset = result / 2;\n                    result += self._encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n    }\n\n    return encoded;\n};\n\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n    if(_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n\n    return utils.sha3(functionName).slice(0, 10);\n};\n\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeEventSignature = function (functionName) {\n    if(_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n\n    return utils.sha3(functionName);\n};\n\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n * @param {String} type\n * @param {Object} param\n * @return {String} encoded plain param\n */\nABICoder.prototype.encodeParameter = function (type, param) {\n    return this.encodeParameters([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nABICoder.prototype.encodeParameters = function (types, params) {\n    // given a json interface\n    if(_.isObject(types) && types.inputs) {\n        types = _.map(types.inputs, function (input) {\n            return input.type;\n        });\n    }\n\n    var solidityTypes = this._getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n                32 :\n                roundedStaticPartLength);\n    }, 0);\n\n    return '0x'+ this._encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n};\n\n\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface, params).replace('0x','');\n};\n\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nABICoder.prototype.decodeParameter = function (type, bytes) {\n\n    if (!_.isString(type)) {\n        throw new Error('Given parameter type is not a string: '+ type);\n    }\n\n    return this.decodeParameters([{type: type}], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n    var isTypeArray = _.isArray(outputs) && _.isString(outputs[0]);\n    var types = (isTypeArray) ? outputs : [];\n\n    if(!isTypeArray) {\n        outputs.forEach(function (output) {\n            types.push(output.type);\n        });\n    }\n\n    var solidityTypes = this._getSolidityTypes(types);\n    var offsets = this._getOffsets(types, solidityTypes);\n\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n    var count = 0;\n\n    outputs.forEach(function (output, i) {\n        var decodedValue = solidityTypes[count].decode(bytes.replace(/^0x/i,''), offsets[count],  types[count], count);\n        decodedValue = (decodedValue === '0x') ? null : decodedValue;\n\n        returnValue[i] = decodedValue;\n\n        if (_.isObject(output) && output.name) {\n            returnValue[output.name] = decodedValue;\n        }\n\n        returnValue.__length__++;\n        count++;\n    });\n\n    return returnValue;\n};\n\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * * @param {Array} topics\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n\n    data = data || '';\n\n    var notIndexedInputs = [];\n    var indexedInputs = [];\n\n    inputs.forEach(function (input, i) {\n        if (input.indexed) {\n            indexedInputs[i] = input;\n        } else {\n            notIndexedInputs[i] = input;\n        }\n    });\n\n    var nonIndexedData = data.slice(2);\n    var indexedData = _.isArray(topics) ? topics.map(function (topic) { return topic.slice(2); }).join('') : topics;\n\n    var notIndexedParams = this.decodeParameters(notIndexedInputs, nonIndexedData);\n    var indexedParams = this.decodeParameters(indexedInputs, indexedData);\n\n\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n\n    inputs.forEach(function (res, i) {\n        returnValue[i] = (res.type === 'string') ? '' : null;\n\n        if (notIndexedParams[i]) {\n            returnValue[i] = notIndexedParams[i];\n        }\n        if (indexedParams[i]) {\n            returnValue[i] = indexedParams[i];\n        }\n\n        if(res.name) {\n            returnValue[res.name] = returnValue[i];\n        }\n\n        returnValue.__length__++;\n    });\n\n    return returnValue;\n};\n\n\nvar coder = new ABICoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString()\n]);\n\nmodule.exports = coder;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar core = require('web3-core');\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar formatters = require('web3-core-helpers').formatters;\n\n\nvar Personal = function Personal() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    this.net = new Net(this.currentProvider);\n\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));\n            }\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    var methods = [\n        new Method({\n            name: 'getAccounts',\n            call: 'personal_listAccounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'newAccount',\n            call: 'personal_newAccount',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'unlockAccount',\n            call: 'personal_unlockAccount',\n            params: 3,\n            inputFormatter: [formatters.inputAddressFormatter, null, null]\n        }),\n        new Method({\n            name: 'lockAccount',\n            call: 'personal_lockAccount',\n            params: 1,\n            inputFormatter: [formatters.inputAddressFormatter]\n        }),\n        new Method({\n            name: 'importRawKey',\n            call: 'personal_importRawKey',\n            params: 2\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'personal_sendTransaction',\n            params: 2,\n            inputFormatter: [formatters.inputTransactionFormatter, null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'personal_signTransaction',\n            params: 2,\n            inputFormatter: [formatters.inputTransactionFormatter, null]\n        }),\n        new Method({\n            name: 'sign',\n            call: 'personal_sign',\n            params: 3,\n            inputFormatter: [formatters.inputSignFormatter, formatters.inputAddressFormatter, null]\n        }),\n        new Method({\n            name: 'ecRecover',\n            call: 'personal_ecRecover',\n            params: 2,\n            inputFormatter: [formatters.inputSignFormatter, null]\n        })\n    ];\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager);\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n    });\n};\n\ncore.addProviders(Personal);\n\n\n\nmodule.exports = Personal;\n\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar Subscription = require('./subscription.js');\n\n\nvar Subscriptions = function Subscriptions(options) {\n    this.name = options.name;\n    this.type = options.type;\n    this.subscriptions = options.subscriptions || {};\n    this.requestManager = null;\n};\n\n\nSubscriptions.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n\nSubscriptions.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n\nSubscriptions.prototype.buildCall = function() {\n    var _this = this;\n\n    return function(){\n        if(!_this.subscriptions[arguments[0]]) {\n            console.warn('Subscription '+ JSON.stringify(arguments[0]) +' doesn\\'t exist. Subscribing anyway.');\n        }\n\n        var subscription = new Subscription({\n            subscription: _this.subscriptions[arguments[0]],\n            requestManager: _this.requestManager,\n            type: _this.type\n        });\n\n        return subscription.subscribe.apply(subscription, arguments);\n    };\n};\n\n\nmodule.exports = {\n    subscriptions: Subscriptions,\n    subscription: Subscription\n};\n","//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = require('./rng');\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n  var i = (buf && offset) || 0, ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n    if (ii < 16) { // Don't overflow!\n      buf[i + ii++] = _hexToByte[oct];\n    }\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n}\n\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n  var i = offset || 0, bth = _byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; n++) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : unparse(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\n\nmodule.exports = uuid;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar BN = require('bn.js');\nvar SolidityParam = require('./param');\n\n\n\n/**\n * Formats input value to byte representation of int\n * If value is negative, return it's two's complement\n * If the value is floating point, round it down\n *\n * @method formatInputInt\n * @param {String|Number|BN} value that needs to be formatted\n * @returns {SolidityParam}\n */\nvar formatInputInt = function (value) {\n    if(_.isNumber(value)) {\n        value = Math.trunc(value);\n    }\n    return new SolidityParam(utils.toTwosComplement(value).replace('0x',''));\n};\n\n/**\n * Formats input bytes\n *\n * @method formatInputBytes\n * @param {String} value\n * @returns {SolidityParam}\n */\nvar formatInputBytes = function (value) {\n    if(!utils.isHexStrict(value)) {\n        throw new Error('Given parameter is not bytes: \"'+ value + '\"');\n    }\n\n    var result = value.replace(/^0x/i,'');\n\n    if(result.length % 2 !== 0) {\n        throw new Error('Given parameter bytes has an invalid length: \"'+ value + '\"');\n    }\n\n    if (result.length > 64) {\n        throw new Error('Given parameter bytes is too long: \"' + value + '\"');\n    }\n\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input bytes\n *\n * @method formatDynamicInputBytes\n * @param {String} value\n * @returns {SolidityParam}\n */\nvar formatInputDynamicBytes = function (value) {\n    if(!utils.isHexStrict(value)) {\n        throw new Error('Given parameter is not bytes: \"'+ value + '\"');\n    }\n\n    var result = value.replace(/^0x/i,'');\n\n    if(result.length % 2 !== 0) {\n        throw new Error('Given parameter bytes has an invalid length: \"'+ value + '\"');\n    }\n\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of string\n *\n * @method formatInputString\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputString = function (value) {\n    if(!_.isString(value)) {\n        throw new Error('Given parameter is not a valid string: ' + value);\n    }\n\n    var result = utils.utf8ToHex(value).replace(/^0x/i,'');\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of bool\n *\n * @method formatInputBool\n * @param {Boolean}\n * @returns {SolidityParam}\n */\nvar formatInputBool = function (value) {\n    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');\n    return new SolidityParam(result);\n};\n\n\n/**\n * Check if input value is negative\n *\n * @method signedIsNegative\n * @param {String} value is hex format\n * @returns {Boolean} true if it is negative, otherwise false\n */\nvar signedIsNegative = function (value) {\n    return (new BN(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';\n};\n\n/**\n * Formats right-aligned output bytes to int\n *\n * @method formatOutputInt\n * @param {SolidityParam} param\n * @returns {BN} right-aligned output bytes formatted to big number\n */\nvar formatOutputInt = function (param) {\n    var value = param.staticPart();\n\n    if(!value && !param.rawValue) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    // check if it's negative number\n    // it it is, return two's complement\n    if (signedIsNegative(value)) {\n        return new BN(value, 16).fromTwos(256).toString(10);\n    }\n    return new BN(value, 16).toString(10);\n};\n\n/**\n * Formats right-aligned output bytes to uint\n *\n * @method formatOutputUInt\n * @param {SolidityParam} param\n * @returns {BN} right-aligned output bytes formatted to uint\n */\nvar formatOutputUInt = function (param, name) {\n    var value = param.staticPart();\n\n    if(!value && !param.rawValue) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    return new BN(value, 16).toString(10);\n};\n\n\n\n/**\n * Should be used to format output bool\n *\n * @method formatOutputBool\n * @param {SolidityParam} param\n * @param {String} name type name\n * @returns {Boolean} right-aligned input bytes formatted to bool\n */\nvar formatOutputBool = function (param, name) {\n    var value = param.staticPart();\n\n    if(!value && !param.rawValue) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    return (value === '0000000000000000000000000000000000000000000000000000000000000001');\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputBytes\n * @param {SolidityParam} param left-aligned hex representation of string\n * @param {String} name type name\n * @returns {String} hex string\n */\nvar formatOutputBytes = function (param, name) {\n    var matches = name.match(/^bytes([0-9]*)/);\n    var size = parseInt(matches[1]);\n\n    if(param.staticPart().slice(0, 2 * size).length !== size * 2) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue + ' The size doesn\\'t match.');\n    }\n\n    return '0x' + param.staticPart().slice(0, 2 * size);\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputDynamicBytes\n * @param {SolidityParam} param left-aligned hex representation of string\n * @param {String} name type name\n * @returns {String} hex string\n */\nvar formatOutputDynamicBytes = function (param, name) {\n    var hex = param.dynamicPart().slice(0, 64);\n\n    if (!hex) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    var length = (new BN(hex, 16)).toNumber() * 2;\n    return '0x' + param.dynamicPart().substr(64, length);\n};\n\n/**\n * Should be used to format output string\n *\n * @method formatOutputString\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} ascii string\n */\nvar formatOutputString = function (param) {\n    var hex = param.dynamicPart().slice(0, 64);\n\n    if(!hex) {\n        throw new Error('ERROR: The returned value is not a convertible string:'+ hex);\n    }\n\n    var length = (new BN(hex, 16)).toNumber() * 2;\n    return length ? utils.hexToUtf8('0x'+ param.dynamicPart().substr(64, length).replace(/^0x/i, '')) : '';\n};\n\n/**\n * Should be used to format output address\n *\n * @method formatOutputAddress\n * @param {SolidityParam} param right-aligned input bytes\n * @param {String} name type name\n * @returns {String} address\n */\nvar formatOutputAddress = function (param, name) {\n    var value = param.staticPart();\n\n    if (!value) {\n        throw new Error('Couldn\\'t decode '+ name +' from ABI: 0x'+ param.rawValue);\n    }\n\n    return utils.toChecksumAddress(\"0x\" + value.slice(value.length - 40, value.length));\n};\n\nmodule.exports = {\n    formatInputInt: formatInputInt,\n    formatInputBytes: formatInputBytes,\n    formatInputDynamicBytes: formatInputDynamicBytes,\n    formatInputString: formatInputString,\n    formatInputBool: formatInputBool,\n    formatOutputInt: formatOutputInt,\n    formatOutputUInt: formatOutputUInt,\n    formatOutputBool: formatOutputBool,\n    formatOutputBytes: formatOutputBytes,\n    formatOutputDynamicBytes: formatOutputDynamicBytes,\n    formatOutputString: formatOutputString,\n    formatOutputAddress: formatOutputAddress,\n    toTwosComplement: utils.toTwosComplement\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2016\n */\n\n\"use strict\";\n\nvar EventEmitter = require('eventemitter3');\nvar Promise = require(\"any-promise\");\n\n/**\n * This function generates a defer promise and adds eventEmitter functionality to it\n *\n * @method eventifiedPromise\n */\nvar PromiEvent = function PromiEvent(justPromise) {\n    var resolve, reject,\n        eventEmitter = new Promise(function() {\n            resolve = arguments[0];\n            reject = arguments[1];\n        });\n\n    if(justPromise) {\n        return {\n            resolve: resolve,\n            reject: reject,\n            eventEmitter: eventEmitter\n        };\n    }\n\n    // get eventEmitter\n    var emitter = new EventEmitter();\n\n    // add eventEmitter to the promise\n    eventEmitter._events = emitter._events;\n    eventEmitter.emit = emitter.emit;\n    eventEmitter.on = emitter.on;\n    eventEmitter.once = emitter.once;\n    eventEmitter.off = emitter.off;\n    eventEmitter.listeners = emitter.listeners;\n    eventEmitter.addListener = emitter.addListener;\n    eventEmitter.removeListener = emitter.removeListener;\n    eventEmitter.removeAllListeners = emitter.removeAllListeners;\n\n    return {\n        resolve: resolve,\n        reject: reject,\n        eventEmitter: eventEmitter\n    };\n};\n\nPromiEvent.resolve = function(value) {\n    var promise = PromiEvent(true);\n    promise.resolve(value);\n    return promise.eventEmitter;\n};\n\nmodule.exports = PromiEvent;\n","var f = require('../formatters');\nvar formatters = require('web3-core-helpers').formatters;\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeAddress is a protoype that represents address type\n * It matches:\n * address\n * address[]\n * address[4]\n * address[][]\n * address[3][]\n * address[][6][], ...\n */\nvar SolidityTypeAddress = function () {\n    this._inputFormatter = function(){\n        var args = Array.prototype.slice.call(arguments);\n        args[0] = (!args[0] || args[0] === '0x0') ? '' : formatters.inputAddressFormatter(args[0]);\n        return f.formatInputInt.apply(this, args);\n    };\n    this._outputFormatter = f.formatOutputAddress;\n};\n\nSolidityTypeAddress.prototype = new SolidityType({});\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;\n\nSolidityTypeAddress.prototype.isType = function (name) {\n    return !!name.match(/address(\\[([0-9]*)\\])?/);\n};\n\nmodule.exports = SolidityTypeAddress;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","// This was ported from https://github.com/emn178/js-sha3, with some minor\n// modifications and pruning. It is licensed under MIT:\n//\n// Copyright 2015-2016 Chen, Yi-Cyuan\n//  \n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar HEX_CHARS = '0123456789abcdef'.split('');\nvar KECCAK_PADDING = [1, 256, 65536, 16777216];\nvar SHIFT = [0, 8, 16, 24];\nvar RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\nvar Keccak = function Keccak(bits) {\n  return {\n    blocks: [],\n    reset: true,\n    block: 0,\n    start: 0,\n    blockCount: 1600 - (bits << 1) >> 5,\n    outputBlocks: bits >> 5,\n    s: function (s) {\n      return [].concat(s, s, s, s, s);\n    }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  };\n};\n\nvar update = function update(state, message) {\n  var length = message.length,\n      blocks = state.blocks,\n      byteCount = state.blockCount << 2,\n      blockCount = state.blockCount,\n      outputBlocks = state.outputBlocks,\n      s = state.s,\n      index = 0,\n      i,\n      code;\n\n  // update\n  while (index < length) {\n    if (state.reset) {\n      state.reset = false;\n      blocks[0] = state.block;\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    if (typeof message !== \"string\") {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n    state.lastByteIndex = i;\n    if (i >= byteCount) {\n      state.start = i - byteCount;\n      state.block = blocks[blockCount];\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n      f(s);\n      state.reset = true;\n    } else {\n      state.start = i;\n    }\n  }\n\n  // finalize\n  i = state.lastByteIndex;\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n  if (state.lastByteIndex === byteCount) {\n    blocks[0] = blocks[blockCount];\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n  blocks[blockCount - 1] |= 0x80000000;\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n  f(s);\n\n  // toString\n  var hex = '',\n      i = 0,\n      j = 0,\n      block;\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n    }\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  }\n  return \"0x\" + hex;\n};\n\nvar f = function f(s) {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nvar keccak = function keccak(bits) {\n  return function (str) {\n    var msg;\n    if (str.slice(0, 2) === \"0x\") {\n      msg = [];\n      for (var i = 2, l = str.length; i < l; i += 2) {\n        msg.push(parseInt(str.slice(i, i + 2), 16));\n      }\n    } else {\n      msg = str;\n    }\n    return update(Keccak(bits, bits), msg);\n  };\n};\n\nmodule.exports = {\n  keccak256: keccak(256),\n  keccak512: keccak(512),\n  keccak256s: keccak(256),\n  keccak512s: keccak(512)\n};","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeBool is a protoype that represents bool type\n * It matches:\n * bool\n * bool[]\n * bool[4]\n * bool[][]\n * bool[3][]\n * bool[][6][], ...\n */\nvar SolidityTypeBool = function () {\n    this._inputFormatter = f.formatInputBool;\n    this._outputFormatter = f.formatOutputBool;\n};\n\nSolidityTypeBool.prototype = new SolidityType({});\nSolidityTypeBool.prototype.constructor = SolidityTypeBool;\n\nSolidityTypeBool.prototype.isType = function (name) {\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBool;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","// This was ported from https://github.com/emn178/js-sha3, with some minor\n// modifications and pruning. It is licensed under MIT:\n//\n// Copyright 2015-2016 Chen, Yi-Cyuan\n//  \n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar HEX_CHARS = '0123456789abcdef'.split('');\nvar KECCAK_PADDING = [1, 256, 65536, 16777216];\nvar SHIFT = [0, 8, 16, 24];\nvar RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\nvar Keccak = function Keccak(bits) {\n  return {\n    blocks: [],\n    reset: true,\n    block: 0,\n    start: 0,\n    blockCount: 1600 - (bits << 1) >> 5,\n    outputBlocks: bits >> 5,\n    s: function (s) {\n      return [].concat(s, s, s, s, s);\n    }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  };\n};\n\nvar update = function update(state, message) {\n  var length = message.length,\n      blocks = state.blocks,\n      byteCount = state.blockCount << 2,\n      blockCount = state.blockCount,\n      outputBlocks = state.outputBlocks,\n      s = state.s,\n      index = 0,\n      i,\n      code;\n\n  // update\n  while (index < length) {\n    if (state.reset) {\n      state.reset = false;\n      blocks[0] = state.block;\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    if (typeof message !== \"string\") {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n    state.lastByteIndex = i;\n    if (i >= byteCount) {\n      state.start = i - byteCount;\n      state.block = blocks[blockCount];\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n      f(s);\n      state.reset = true;\n    } else {\n      state.start = i;\n    }\n  }\n\n  // finalize\n  i = state.lastByteIndex;\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n  if (state.lastByteIndex === byteCount) {\n    blocks[0] = blocks[blockCount];\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n  blocks[blockCount - 1] |= 0x80000000;\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n  f(s);\n\n  // toString\n  var hex = '',\n      i = 0,\n      j = 0,\n      block;\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n    }\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  }\n  return \"0x\" + hex;\n};\n\nvar f = function f(s) {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nvar keccak = function keccak(bits) {\n  return function (str) {\n    var msg;\n    if (str.slice(0, 2) === \"0x\") {\n      msg = [];\n      for (var i = 2, l = str.length; i < l; i += 2) {\n        msg.push(parseInt(str.slice(i, i + 2), 16));\n      }\n    } else {\n      msg = str;\n    }\n    return update(Keccak(bits, bits), msg);\n  };\n};\n\nmodule.exports = {\n  keccak256: keccak(256),\n  keccak512: keccak(512),\n  keccak256s: keccak(256),\n  keccak512s: keccak(512)\n};","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar Jsonrpc = require('./jsonrpc');\nvar errors = require('web3-core-helpers').errors;\n\nvar Batch = function (requestManager) {\n    this.requestManager = requestManager;\n    this.requests = [];\n};\n\n/**\n * Should be called to add create new request to batch request\n *\n * @method add\n * @param {Object} jsonrpc requet object\n */\nBatch.prototype.add = function (request) {\n    this.requests.push(request);\n};\n\n/**\n * Should be called to execute batch request\n *\n * @method execute\n */\nBatch.prototype.execute = function () {\n    var requests = this.requests;\n    this.requestManager.sendBatch(requests, function (err, results) {\n        results = results || [];\n        requests.map(function (request, index) {\n            return results[index] || {};\n        }).forEach(function (result, index) {\n            if (requests[index].callback) {\n\n                if (result && result.error) {\n                    return requests[index].callback(errors.ErrorResponse(result));\n                }\n\n                if (!Jsonrpc.isValidResponse(result)) {\n                    return requests[index].callback(errors.InvalidResponse(result));\n                }\n\n                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));\n            }\n        });\n    });\n};\n\nmodule.exports = Batch;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/** @file WebsocketProvider.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\n\nvar Ws = null;\nvar _btoa = null;\nvar parseURL = null;\nif (typeof window !== 'undefined') {\n    Ws = window.WebSocket;\n    _btoa = btoa;\n    parseURL = function(url) {\n        return new URL(url);\n    };\n} else {\n    Ws = require('websocket').w3cwebsocket;\n    _btoa = function(str) {\n      return Buffer(str).toString('base64');\n    };\n    // Web3 supports Node.js 5, so we need to use the legacy URL API\n    parseURL = require('url').parse;\n}\n// Default connection ws://localhost:8546\n\n\n\n\nvar WebsocketProvider = function WebsocketProvider(url, options)  {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.notificationCallbacks = [];\n\n    options = options || {};\n    this._customTimeout = options.timeout;\n\n    // The w3cwebsocket implementation does not support Basic Auth\n    // username/password in the URL. So generate the basic auth header, and\n    // pass through with any additional headers supplied in constructor\n    var parsedURL = parseURL(url);\n    var headers = options.headers || {};\n    if (parsedURL.username && parsedURL.password) {\n        headers.authorization = 'Basic ' + _btoa(parsedURL.username + ':' + parsedURL.password);\n    }\n\n    this.connection = new Ws(url, undefined, undefined, headers);\n\n    this.addDefaultEvents();\n\n\n    // LISTEN FOR CONNECTION RESPONSES\n    this.connection.onmessage = function(e) {\n        /*jshint maxcomplexity: 6 */\n        var data = (typeof e.data === 'string') ? e.data : '';\n\n        _this._parseResponse(data).forEach(function(result){\n\n            var id = null;\n\n            // get the id which matches the returned id\n            if(_.isArray(result)) {\n                result.forEach(function(load){\n                    if(_this.responseCallbacks[load.id])\n                        id = load.id;\n                });\n            } else {\n                id = result.id;\n            }\n\n            // notification\n            if(!id && result.method.indexOf('_subscription') !== -1) {\n                _this.notificationCallbacks.forEach(function(callback){\n                    if(_.isFunction(callback))\n                        callback(result);\n                });\n\n                // fire the callback\n            } else if(_this.responseCallbacks[id]) {\n                _this.responseCallbacks[id](null, result);\n                delete _this.responseCallbacks[id];\n            }\n        });\n    };\n};\n\n/**\n Will add the error and end event to timeout existing calls\n\n @method addDefaultEvents\n */\nWebsocketProvider.prototype.addDefaultEvents = function(){\n    var _this = this;\n\n    this.connection.onerror = function(){\n        _this._timeout();\n    };\n\n    this.connection.onclose = function(){\n        _this._timeout();\n\n        // reset all requests and callbacks\n        _this.reset();\n    };\n\n    // this.connection.on('timeout', function(){\n    //     _this._timeout();\n    // });\n};\n\n/**\n Will parse the response and make an array out of it.\n\n @method _parseResponse\n @param {String} data\n */\nWebsocketProvider.prototype._parseResponse = function(data) {\n    var _this = this,\n        returnValues = [];\n\n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g,'}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g,'}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g,'}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g,'}]|--|{') // }]{\n        .split('|--|');\n\n    dechunkedData.forEach(function(data){\n\n        // prepend the last chunk\n        if(_this.lastChunk)\n            data = _this.lastChunk + data;\n\n        var result = null;\n\n        try {\n            result = JSON.parse(data);\n\n        } catch(e) {\n\n            _this.lastChunk = data;\n\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function(){\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n\n            return;\n        }\n\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n\n        if(result)\n            returnValues.push(result);\n    });\n\n    return returnValues;\n};\n\n\n/**\n Adds a callback to the responseCallbacks object,\n which will be called if a response matching the response Id will arrive.\n\n @method _addResponseCallback\n */\nWebsocketProvider.prototype._addResponseCallback = function(payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n\n    var _this = this;\n\n    // schedule triggering the error response if a custom timeout is set\n    if (this._customTimeout) {\n        setTimeout(function () {\n            if (_this.responseCallbacks[id]) {\n                _this.responseCallbacks[id](errors.ConnectionTimeout(_this._customTimeout));\n                delete _this.responseCallbacks[id];\n            }\n        }, this._customTimeout);\n    }\n};\n\n/**\n Timeout all requests when the end/error event is fired\n\n @method _timeout\n */\nWebsocketProvider.prototype._timeout = function() {\n    for(var key in this.responseCallbacks) {\n        if(this.responseCallbacks.hasOwnProperty(key)){\n            this.responseCallbacks[key](errors.InvalidConnection('on WS'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n\n\nWebsocketProvider.prototype.send = function (payload, callback) {\n    var _this = this;\n\n    if (this.connection.readyState === this.connection.CONNECTING) {\n        setTimeout(function () {\n            _this.send(payload, callback);\n        }, 10);\n        return;\n    }\n\n    // try reconnect, when connection is gone\n    // if(!this.connection.writable)\n    //     this.connection.connect({url: this.url});\n    if (this.connection.readyState !== this.connection.OPEN) {\n        console.error('connection not open on send()');\n        if (typeof this.connection.onerror === 'function') {\n            this.connection.onerror(new Error('connection not open'));\n        } else {\n            console.error('no error callback');\n        }\n        callback(new Error('connection not open'));\n        return;\n    }\n\n    this.connection.send(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\nWebsocketProvider.prototype.on = function (type, callback) {\n\n    if(typeof callback !== 'function')\n        throw new Error('The second parameter callback must be a function.');\n\n    switch(type){\n        case 'data':\n            this.notificationCallbacks.push(callback);\n            break;\n\n        case 'connect':\n            this.connection.onopen = callback;\n            break;\n\n        case 'end':\n            this.connection.onclose = callback;\n            break;\n\n        case 'error':\n            this.connection.onerror = callback;\n            break;\n\n        // default:\n        //     this.connection.on(type, callback);\n        //     break;\n    }\n};\n\n// TODO add once\n\n/**\n Removes event listener\n\n @method removeListener\n @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\nWebsocketProvider.prototype.removeListener = function (type, callback) {\n    var _this = this;\n\n    switch(type){\n        case 'data':\n            this.notificationCallbacks.forEach(function(cb, index){\n                if(cb === callback)\n                    _this.notificationCallbacks.splice(index, 1);\n            });\n            break;\n\n        // TODO remvoving connect missing\n\n        // default:\n        //     this.connection.removeListener(type, callback);\n        //     break;\n    }\n};\n\n/**\n Removes all event listeners\n\n @method removeAllListeners\n @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'\n */\nWebsocketProvider.prototype.removeAllListeners = function (type) {\n    switch(type){\n        case 'data':\n            this.notificationCallbacks = [];\n            break;\n\n        // TODO remvoving connect properly missing\n\n        case 'connect':\n            this.connection.onopen = null;\n            break;\n\n        case 'end':\n            this.connection.onclose = null;\n            break;\n\n        case 'error':\n            this.connection.onerror = null;\n            break;\n\n        default:\n            // this.connection.removeAllListeners(type);\n            break;\n    }\n};\n\n/**\n Resets the providers, clears all callbacks\n\n @method reset\n */\nWebsocketProvider.prototype.reset = function () {\n    this._timeout();\n    this.notificationCallbacks = [];\n\n    // this.connection.removeAllListeners('error');\n    // this.connection.removeAllListeners('end');\n    // this.connection.removeAllListeners('timeout');\n\n    this.addDefaultEvents();\n};\n\nmodule.exports = WebsocketProvider;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar swarm = require(\"swarm-js\");\n\n\nvar Bzz = function Bzz(provider) {\n\n    this.givenProvider = Bzz.givenProvider;\n\n    if (provider && provider._requestManager) {\n        provider = provider.currentProvider;\n    }\n\n    // only allow file picker when in browser\n    if(typeof document !== 'undefined') {\n        this.pick = swarm.pick;\n    }\n\n    this.setProvider(provider);\n};\n\n// set default ethereum provider\n/* jshint ignore:start */\nBzz.givenProvider = null;\nif(typeof ethereumProvider !== 'undefined' && ethereumProvider.bzz) {\n    Bzz.givenProvider = ethereumProvider.bzz;\n}\n/* jshint ignore:end */\n\nBzz.prototype.setProvider = function(provider) {\n    // is ethereum provider\n    if(_.isObject(provider) && _.isString(provider.bzz)) {\n        provider = provider.bzz;\n    // is no string, set default\n    }\n    // else if(!_.isString(provider)) {\n    //      provider = 'http://swarm-gateways.net'; // default to gateway\n    // }\n\n\n    if(_.isString(provider)) {\n        this.currentProvider = provider;\n    } else {\n        this.currentProvider = null;\n\n        var noProviderError = new Error('No provider set, please set one using bzz.setProvider().');\n\n        this.download = this.upload = this.isAvailable = function(){\n            throw noProviderError;\n        };\n\n        return false;\n    }\n\n    // add functions\n    this.download = swarm.at(provider).download;\n    this.upload = swarm.at(provider).upload;\n    this.isAvailable = swarm.at(provider).isAvailable;\n\n    return true;\n};\n\n\nmodule.exports = Bzz;\n\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","module.exports = XMLHttpRequest;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join(',');\n    return json.name + '(' + typeName + ')';\n};\n\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","var BN = require(\"bn.js\");\nvar Bytes = require(\"./bytes\");\n\nvar fromBN = function fromBN(bn) {\n  return \"0x\" + bn.toString(\"hex\");\n};\n\nvar toBN = function toBN(str) {\n  return new BN(str.slice(2), 16);\n};\n\nvar fromString = function fromString(str) {\n  var bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nvar toEther = function toEther(wei) {\n  return toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n};\n\nvar fromEther = function fromEther(eth) {\n  return mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n};\n\nvar toString = function toString(a) {\n  return toBN(a).toString(10);\n};\n\nvar fromNumber = function fromNumber(a) {\n  return typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n};\n\nvar toNumber = function toNumber(a) {\n  return toBN(a).toNumber();\n};\n\nvar toUint256 = function toUint256(a) {\n  return Bytes.pad(32, a);\n};\n\nvar bin = function bin(method) {\n  return function (a, b) {\n    return fromBN(toBN(a)[method](toBN(b)));\n  };\n};\n\nvar add = bin(\"add\");\nvar mul = bin(\"mul\");\nvar div = bin(\"div\");\nvar sub = bin(\"sub\");\n\nmodule.exports = {\n  toString: toString,\n  fromString: fromString,\n  toNumber: toNumber,\n  fromNumber: fromNumber,\n  toEther: toEther,\n  fromEther: fromEther,\n  toUint256: toUint256,\n  add: add,\n  mul: mul,\n  div: div,\n  sub: sub\n};","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file param.js\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\nvar formatters = require('./formatters.js');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset, rawValue) {\n    this.value = value || '';\n    this.offset = offset; // offset in bytes\n    this.rawValue = rawValue; // used for debugging\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n *\n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n    return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n    return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n    return new SolidityParam(this.value + param.value);\n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n    return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n    return !this.isDynamic() ? '' : formatters.toTwosComplement(this.offset).replace('0x','');\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n    if (!this.isDynamic()) {\n        return this.value;\n    }\n    return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n    return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n    return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n\n    // updating offsets\n    var totalOffset = params.length * 32;\n    var offsetParams = params.map(function (param) {\n        if (!param.isDynamic()) {\n            return param;\n        }\n        var offset = totalOffset;\n        totalOffset += param.dynamicPartLength();\n        return param.withOffset(offset);\n    });\n\n    // encode everything!\n    return offsetParams.reduce(function (result, param) {\n        return result + param.dynamicPart();\n    }, offsetParams.reduce(function (result, param) {\n        return result + param.staticPart();\n    }, ''));\n};\n\n\n\nmodule.exports = SolidityParam;\n\n","var f = require('../formatters');\nvar SolidityType = require('../type');\n\n/**\n * SolidityTypeInt is a protoype that represents int type\n * It matches:\n * int\n * int[]\n * int[4]\n * int[][]\n * int[3][]\n * int[][6][], ...\n * int32\n * int64[]\n * int8[4]\n * int256[][]\n * int[3][]\n * int64[][6][], ...\n */\nvar SolidityTypeInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputInt;\n};\n\nSolidityTypeInt.prototype = new SolidityType({});\nSolidityTypeInt.prototype.constructor = SolidityTypeInt;\n\nSolidityTypeInt.prototype.isType = function (name) {\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeInt;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nmodule.exports = {\n    ErrorResponse: function (result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        return new Error('Returned error: ' + message);\n    },\n    InvalidNumberOfParams: function (got, expected, method) {\n        return new Error('Invalid number of parameters for \"'+ method +'\". Got '+ got +' expected '+ expected +'!');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file getNetworkType.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar getNetworkType = function (callback) {\n    var _this = this,\n        id;\n\n\n    return this.net.getId()\n        .then(function (givenId) {\n\n            id = givenId;\n\n            return _this.getBlock(0);\n        })\n        .then(function (genesis) {\n            var returnValue = 'private';\n\n            if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&\n                id === 1) {\n                returnValue = 'main';\n            }\n            if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&\n                id === 2) {\n                returnValue = 'morden';\n            }\n            if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&\n                id === 3) {\n                returnValue = 'ropsten';\n            }\n            if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&\n                id === 4) {\n                returnValue = 'rinkeby';\n            }\n            if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&\n                id === 42) {\n                returnValue = 'kovan';\n            }\n\n            if (_.isFunction(callback)) {\n                callback(null, returnValue);\n            }\n\n            return returnValue;\n        })\n        .catch(function (err) {\n            if (_.isFunction(callback)) {\n                callback(err);\n            } else {\n                throw err;\n            }\n        });\n};\n\nmodule.exports = getNetworkType;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\n\"use strict\";\n\nvar utils = require('web3-utils');\nvar BigNumber = require('bn.js');\n\n\nvar leftPad = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function Iban(iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\nIban.toAddress = function (ib) {\n    ib = new Iban(ib);\n\n    if(!ib.isDirect()) {\n        throw new Error('IBAN is indirect and can\\'t be converted');\n    }\n\n    return ib.toAddress();\n};\n\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\nIban.toIban = function (address) {\n    return Iban.fromAddress(address).toString();\n};\n\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    if(!utils.isAddress(address)){\n        throw new Error('Provided address is not a valid address: '+ address);\n    }\n\n    address = address.replace('0x','').replace('0X','');\n\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\nIban.prototype.toAddress = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return utils.toChecksumAddress(asBn.toString(16, 20));\n    }\n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar requestManager = require('web3-core-requestmanager');\nvar extend = require('./extend.js');\n\nmodule.exports = {\n    packageInit: function (pkg, args) {\n        args = Array.prototype.slice.call(args);\n\n        if (!pkg) {\n            throw new Error('You need to instantiate using the \"new\" keyword.');\n        }\n\n\n        // make property of pkg._provider, which can properly set providers\n        Object.defineProperty(pkg, 'currentProvider', {\n            get: function () {\n                return pkg._provider;\n            },\n            set: function (value) {\n                return pkg.setProvider(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        // inherit from web3 umbrella package\n        if (args[0] && args[0]._requestManager) {\n            pkg._requestManager = new requestManager.Manager(args[0].currentProvider);\n\n        // set requestmanager on package\n        } else {\n            pkg._requestManager = new requestManager.Manager();\n            pkg._requestManager.setProvider(args[0], args[1]);\n        }\n\n        // add givenProvider\n        pkg.givenProvider = requestManager.Manager.givenProvider;\n        pkg.providers = requestManager.Manager.providers;\n\n         pkg._provider =  pkg._requestManager.provider;\n\n        // add SETPROVIDER function (don't overwrite if already existing)\n        if (!pkg.setProvider) {\n            pkg.setProvider = function (provider, net) {\n                pkg._requestManager.setProvider(provider, net);\n                pkg._provider = pkg._requestManager.provider;\n                return true;\n            };\n        }\n\n        // attach batch request creation\n        pkg.BatchRequest = requestManager.BatchManager.bind(null, pkg._requestManager);\n\n        // attach extend function\n        pkg.extend = extend(pkg);\n    },\n    addProviders: function (pkg) {\n        pkg.givenProvider = requestManager.Manager.givenProvider;\n        pkg.providers = requestManager.Manager.providers;\n    }\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\nvar formatters = require('./formatters');\n\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar TIMEOUTBLOCK = 50;\nvar POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\nvar CONFIRMATIONBLOCKS = 24;\n\nvar Method = function Method(options) {\n\n    if(!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if(_.isArray(result)) {\n        return result.map(function(res){\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to;\n\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n            .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\n            })\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(function(receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0){\n                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt);\n                    }\n\n                    canUnsubscribe = false;\n                    confirmationCount++;\n\n                    if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n\n                return receipt;\n            })\n            // CHECK for CONTRACT DEPLOYMENT\n            .then(function(receipt) {\n\n                if (isContractDeployment && !promiseResolved) {\n\n                    if (!receipt.contractAddress) {\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n\n                        utils._fireError(new Error('The transaction receipt didn\\'t contain a contract address.'), defer.eventEmitter, defer.reject);\n                        return;\n                    }\n\n                    _ethereumCall.getCode(receipt.contractAddress, function (e, code) {\n\n                        if (!code) {\n                            return;\n                        }\n\n\n                        if (code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(new Error('The contract code couldn\\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    });\n                }\n\n                return receipt;\n            })\n            // CHECK for normal tx check for receipt only\n            .then(function(receipt) {\n\n                if (!isContractDeployment && !promiseResolved) {\n\n                    if(!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n\n                    } else {\n                        if(receipt) {\n                            receipt = JSON.stringify(receipt, null, 2);\n                        }\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            utils._fireError(new Error(\"Transaction has been reverted by the EVM:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        } else {\n                            utils._fireError(\n                                new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receipt),\n                                defer.eventEmitter, defer.reject);\n                        }\n                    }\n\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n\n            })\n            // time out the transaction if not mined after 50 blocks\n            .catch(function () {\n                timeoutCount++;\n\n                // check to see if we are http polling\n                if(!!isPolling) {\n                    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n                    if (timeoutCount - 1 >= POLLINGTIMEOUT) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                } else {\n                    if (timeoutCount - 1 >= TIMEOUTBLOCK) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function(existingReceipt) {\n        // if provider allows PUB/SUB\n        if (_.isFunction(this.requestManager.provider.on)) {\n            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));\n        } else {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n    .then(function(receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n\n        } else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n    .catch(function(){\n        if (!promiseResolved) startWatching();\n    });\n\n};\n\n\nvar getWallet = function(from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            try {\n                result = method.formatOutput(result);\n            } catch(e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if(err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n\n                if (!err) {\n                    defer.resolve(result);\n\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function(sign){\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function(payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if(isSendTx && _.isObject(payload.params[0]) && !payload.params[0].gasPrice) {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                sendRequest(payload, method);\n            });\n\n        } else {\n            sendRequest(payload, method);\n        }\n\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\n\"use strict\";\n\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    messageId: 0\n};\n\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n    if (!method) {\n        throw new Error('JSONRPC method should be specified for params: \"'+ JSON.stringify(params) +'\"!');\n    }\n\n    // advance message ID\n    Jsonrpc.messageId++;\n\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n\n    function validateSingleMessage(message){\n      return !!message &&\n        !message.error &&\n        message.jsonrpc === '2.0' &&\n        (typeof message.id === 'number' || typeof message.id === 'string') &&\n        message.result !== undefined; // only undefined is not valid json object\n    }\n};\n\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\n\nmodule.exports = Jsonrpc;\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n"],"sourceRoot":""}